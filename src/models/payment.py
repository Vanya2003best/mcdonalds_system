"""
McDonald's Management System - Payment Models
‚úÖ WYMAGANIE: Polimorfizm - r√≥≈ºne metody p≈Çatno≈õci z tym samym interfejsem
‚úÖ WYMAGANIE: Dziedziczenie, nadpisywanie met–æ–¥, enkapsulacja, @classmethod, @staticmethod

–ú–æ–¥–µ–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º McDonald's —Å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–æ–º
"""

from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any, Union
from enum import Enum
import sys
import os
import random
import string

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils.logger import log_transfer, log_requirement_check, log_operation, log_business_rule
from src.exceptions.mcdonalds_exceptions import (
    PaymentProcessingException, InsufficientFundsException, McDonaldsException
)


class PaymentStatus(Enum):
    PENDING = "pending"
    PROCESSING = "processing"
    AUTHORIZED = "authorized"
    CAPTURED = "captured"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"
    REFUNDED = "refunded"


class PaymentMethod(Enum):
    CASH = "cash"
    CREDIT_CARD = "credit_card"
    DEBIT_CARD = "debit_card"
    MOBILE_PAY = "mobile_pay"
    GIFT_CARD = "gift_card"
    LOYALTY_POINTS = "loyalty_points"
    CONTACTLESS = "contactless"
    SPLIT_PAYMENT = "split_payment"


class CurrencyType(Enum):
    USD = "USD"
    EUR = "EUR"
    PLN = "PLN"
    CAD = "CAD"


class PaymentException(McDonaldsException):
    """–ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
    pass


class CardDeclinedException(PaymentException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã"""

    def __init__(self, card_last_four: str, reason: str):
        self.card_last_four = card_last_four
        self.reason = reason
        message = f"Card ending in {card_last_four} declined: {reason}"
        super().__init__(message, "CARD_DECLINED", {"card": card_last_four, "reason": reason})


class InsufficientGiftCardBalanceException(PaymentException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç–µ"""

    def __init__(self, required: float, available: float, card_number: str):
        self.required = required
        self.available = available
        self.card_number = card_number
        message = f"Gift card {card_number}: need ${required:.2f}, have ${available:.2f}"
        super().__init__(message, "INSUFFICIENT_GIFT_CARD_BALANCE",
                         {"required": required, "available": available, "card": card_number})


# ‚úÖ WYMAGANIE: U≈ºycie klas + Polimorfizm - –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π
class Payment(ABC):
    """
    üìã CHECK: Polimorfizm - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    ‚úÖ WYMAGANIE: Polimorfizm - –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    """

    # –ê—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞
    total_payments_processed = 0
    total_amount_processed = 0.0
    payments_by_method = {}
    daily_transaction_limit = 10000.0

    def __init__(self, amount: float, currency: CurrencyType = CurrencyType.USD,
                 order_id: str = "", description: str = ""):
        # üîÑ TRANSFER: payment.py ‚Üí logger (payment creation)
        log_operation("Payment Creation", {
            "amount": amount,
            "currency": currency.value,
            "method": self.__class__.__name__
        })

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        if amount <= 0:
            raise ValueError("Payment amount must be positive")

        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —ç–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏
        self._amount = amount
        self._currency = currency
        self._order_id = order_id
        self._description = description
        self._payment_id = self._generate_payment_id()
        self._status = PaymentStatus.PENDING
        self._created_at = datetime.now()
        self._processed_at: Optional[datetime] = None
        self._transaction_fee = 0.0
        self._exchange_rate = 1.0
        self._refund_amount = 0.0
        self._metadata: Dict[str, Any] = {}

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–ª–∞—Å—Å–∞
        Payment.total_payments_processed += 1
        Payment.total_amount_processed += amount

        payment_method = self.__class__.__name__
        if payment_method not in Payment.payments_by_method:
            Payment.payments_by_method[payment_method] = 0
        Payment.payments_by_method[payment_method] += 1

        # üìã CHECK: Klasy - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
        log_requirement_check("Class Creation", "SUCCESS", f"Payment: {self._payment_id}")

    # ‚úÖ WYMAGANIE: Enkapsulacja - Properties
    @property
    def payment_id(self) -> str:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è ID –ø–ª–∞—Ç–µ–∂–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)"""
        return self._payment_id

    @property
    def amount(self) -> float:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
        return self._amount

    @property
    def currency(self) -> CurrencyType:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –≤–∞–ª—é—Ç—ã"""
        return self._currency

    @property
    def status(self) -> PaymentStatus:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        return self._status

    @status.setter
    def status(self, value: PaymentStatus):
        """
        üìã CHECK: Enkapsulacja - Setter —Å–æ —Å—Ç–∞—Ç—É—Å-–ª–æ–≥–∏–∫–æ–π
        """
        if not isinstance(value, PaymentStatus):
            raise ValueError("Status must be PaymentStatus enum")

        old_status = self._status
        self._status = value

        # –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if value in [PaymentStatus.COMPLETED, PaymentStatus.CAPTURED]:
            self._processed_at = datetime.now()

        log_business_rule("Payment Status Change",
                          f"Payment {self.payment_id}: {old_status.value} ‚Üí {value.value}")

    @property
    def order_id(self) -> str:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è ID –∑–∞–∫–∞–∑–∞"""
        return self._order_id

    @property
    def transaction_fee(self) -> float:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏"""
        return self._transaction_fee

    @property
    def net_amount(self) -> float:
        """–ß–∏—Å—Ç–∞—è —Å—É–º–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏"""
        return self._amount - self._transaction_fee

    # ‚úÖ WYMAGANIE: @staticmethod - –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    @staticmethod
    def _generate_payment_id() -> str:
        """
        üìã CHECK: @staticmethod - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID –ø–ª–∞—Ç–µ–∂–∞
        """
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        random_suffix = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
        payment_id = f"PAY{timestamp}{random_suffix}"

        log_requirement_check("@staticmethod", "EXECUTED", "Payment._generate_payment_id()")
        return payment_id

    @staticmethod
    def validate_amount(amount: float, min_amount: float = 0.01, max_amount: float = 9999.99) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞"""
        return min_amount <= amount <= max_amount

    @staticmethod
    def convert_currency(amount: float, from_currency: CurrencyType,
                         to_currency: CurrencyType) -> float:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤–∞–ª—é—Ç—É (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
        rates = {
            (CurrencyType.USD, CurrencyType.EUR): 0.85,
            (CurrencyType.USD, CurrencyType.PLN): 3.90,
            (CurrencyType.USD, CurrencyType.CAD): 1.25,
            (CurrencyType.EUR, CurrencyType.USD): 1.18,
            (CurrencyType.PLN, CurrencyType.USD): 0.26,
            (CurrencyType.CAD, CurrencyType.USD): 0.80
        }

        if from_currency == to_currency:
            return amount

        rate = rates.get((from_currency, to_currency), 1.0)
        converted = amount * rate

        log_operation("Currency Conversion", {
            "amount": amount,
            "from": from_currency.value,
            "to": to_currency.value,
            "rate": rate,
            "result": converted
        })

        return round(converted, 2)

    @staticmethod
    def calculate_processing_fee(amount: float, fee_percentage: float = 0.029) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        return round(amount * fee_percentage, 2)

    # ‚úÖ WYMAGANIE: @classmethod - Factory methods
    @classmethod
    def get_total_processed(cls) -> Dict[str, Union[int, float]]:
        """
        üìã CHECK: @classmethod - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        """
        log_requirement_check("@classmethod", "EXECUTED", "Payment.get_total_processed()")
        return {
            "count": cls.total_payments_processed,
            "total_amount": cls.total_amount_processed,
            "by_method": cls.payments_by_method.copy()
        }

    @classmethod
    def create_refund_payment(cls, original_payment: 'Payment', refund_amount: float, reason: str):
        """–°–æ–∑–¥–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        if refund_amount > original_payment.amount:
            raise ValueError("Refund amount cannot exceed original payment")

        # –°–æ–∑–¥–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π –ø–ª–∞—Ç–µ–∂
        refund = cls(refund_amount, original_payment.currency, original_payment.order_id,
                     f"Refund: {reason}")
        refund._status = PaymentStatus.REFUNDED
        refund._metadata["original_payment_id"] = original_payment.payment_id
        refund._metadata["refund_reason"] = reason

        return refund

    # ‚úÖ WYMAGANIE: Polimorfizm - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    @abstractmethod
    def process_payment(self) -> bool:
        """
        üìã CHECK: Polimorfizm - –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–ª–∞—Ç–µ–∂. –ö–∞–∂–¥—ã–π –ø–æ–¥–∫–ª–∞—Å—Å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –ø–æ-—Å–≤–æ–µ–º—É
        """
        pass

    @abstractmethod
    def get_payment_method(self) -> PaymentMethod:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –ø–ª–∞—Ç–µ–∂–∞"""
        pass

    @abstractmethod
    def validate_payment_data(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞"""
        pass

    @abstractmethod
    def calculate_fees(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–ª–∞—Ç–µ–∂"""
        pass

    # –û–±—â–∏–µ –º–µ—Ç–æ–¥—ã
    def add_metadata(self, key: str, value: Any):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ –ø–ª–∞—Ç–µ–∂—É"""
        self._metadata[key] = value
        log_operation("Metadata Added", {"payment": self.payment_id, "key": key})

    def get_metadata(self, key: str, default: Any = None) -> Any:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ"""
        return self._metadata.get(key, default)

    def cancel_payment(self, reason: str = "Customer request"):
        """–û—Ç–º–µ–Ω—è–µ—Ç –ø–ª–∞—Ç–µ–∂"""
        if self._status in [PaymentStatus.COMPLETED, PaymentStatus.CAPTURED]:
            raise PaymentProcessingException(self.get_payment_method().value, self.amount,
                                             "Cannot cancel completed payment")

        self._status = PaymentStatus.CANCELLED
        self._metadata["cancellation_reason"] = reason
        log_business_rule("Payment Cancelled", f"{self.payment_id}: {reason}")

    def get_payment_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–ª–∞—Ç–µ–∂–∞"""
        return {
            "payment_id": self.payment_id,
            "method": self.get_payment_method().value,
            "amount": self.amount,
            "currency": self.currency.value,
            "status": self.status.value,
            "transaction_fee": self.transaction_fee,
            "net_amount": self.net_amount,
            "order_id": self.order_id,
            "created_at": self._created_at.isoformat(),
            "processed_at": self._processed_at.isoformat() if self._processed_at else None
        }

    def __str__(self) -> str:
        return f"Payment {self.payment_id} - {self.get_payment_method().value} - ${self.amount:.2f}"

    def __repr__(self) -> str:
        return f"Payment(id='{self.payment_id}', method={self.get_payment_method().value}, amount=${self.amount:.2f})"


# ‚úÖ WYMAGANIE: Dziedziczenie + Polimorfizm - –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
class CashPayment(Payment):
    """
    üìã CHECK: Dziedziczenie - CashPayment –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Payment
    üìã CHECK: Polimorfizm - –†–µ–∞–ª–∏–∑—É–µ—Ç process_payment() –ø–æ-—Å–≤–æ–µ–º—É
    –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏ –¥–µ–Ω—å–≥–∞–º–∏
    """

    def __init__(self, amount: float, cash_tendered: float, currency: CurrencyType = CurrencyType.USD,
                 order_id: str = "", description: str = ""):
        # ‚úÖ WYMAGANIE: super() - –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        super().__init__(amount, currency, order_id, description)

        # üîÑ TRANSFER: Payment.__init__ ‚Üí CashPayment.__init__
        log_transfer("Payment.__init__", "CashPayment.__init__", "cash specific attributes")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç—ã
        self.cash_tendered = cash_tendered
        self._change_amount = max(0, cash_tendered - amount)
        self._cashier_id: Optional[str] = None
        self._register_number: Optional[int] = None

        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if cash_tendered < amount:
            raise InsufficientFundsException(amount, cash_tendered)

        log_requirement_check("Inheritance", "SUCCESS", f"CashPayment extends Payment: {self.payment_id}")

    # ‚úÖ WYMAGANIE: Polimorfizm - –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞
    def process_payment(self) -> bool:
        """
        üìã CHECK: Polimorfizm - –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if not self.validate_payment_data():
                raise PaymentProcessingException("cash", self.amount, "Invalid payment data")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–ª–∏—á–Ω—ã–µ
            self.status = PaymentStatus.PROCESSING

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏ (–¥–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–µ—Ç)
            self._transaction_fee = self.calculate_fees()

            # –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            log_business_rule("Cash Processing",
                              f"Tendered: ${self.cash_tendered:.2f}, Change: ${self._change_amount:.2f}")

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
            self.status = PaymentStatus.COMPLETED

            log_business_rule("Payment Processed", f"Cash payment {self.payment_id} completed")
            return True

        except Exception as e:
            self.status = PaymentStatus.FAILED
            log_business_rule("Payment Failed", f"Cash payment {self.payment_id}: {str(e)}")
            raise PaymentProcessingException("cash", self.amount, str(e))

    def get_payment_method(self) -> PaymentMethod:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏"""
        return PaymentMethod.CASH

    def validate_payment_data(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        if self.cash_tendered < self.amount:
            return False
        if self.amount <= 0:
            return False
        return True

    def calculate_fees(self) -> float:
        """–î–ª—è –Ω–∞–ª–∏—á–Ω—ã—Ö –Ω–µ—Ç –∫–æ–º–∏—Å—Å–∏–π"""
        return 0.0

    # ‚úÖ WYMAGANIE: Wiele konstruktor√≥w - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    @classmethod
    def create_exact_change(cls, amount: float, currency: CurrencyType = CurrencyType.USD):
        """
        üìã CHECK: Wiele konstruktor√≥w - —Ç–æ—á–Ω–∞—è —Å—É–º–º–∞ –±–µ–∑ —Å–¥–∞—á–∏
        """
        payment = cls(amount, amount, currency, "", "Exact change payment")
        log_requirement_check("Multiple Constructors", "EXECUTED", "CashPayment.create_exact_change()")
        return payment

    @classmethod
    def create_large_bill_payment(cls, amount: float, bill_denomination: int):
        """–°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –∫—Ä—É–ø–Ω–æ–π –∫—É–ø—é—Ä–æ–π"""
        if bill_denomination < amount:
            raise ValueError("Bill denomination must be larger than amount")

        payment = cls(amount, bill_denomination, CurrencyType.USD, "",
                      f"Payment with ${bill_denomination} bill")
        return payment

    def assign_cashier(self, cashier_id: str, register_number: int):
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∫–∞—Å—Å–∏—Ä–∞ –∏ –∫–∞—Å—Å—É"""
        self._cashier_id = cashier_id
        self._register_number = register_number
        self.add_metadata("cashier_id", cashier_id)
        self.add_metadata("register", register_number)
        log_business_rule("Cashier Assigned",
                          f"Cash payment {self.payment_id}: {cashier_id} at register {register_number}")

    @property
    def change_amount(self) -> float:
        """–°—É–º–º–∞ —Å–¥–∞—á–∏"""
        return self._change_amount


# ‚úÖ WYMAGANIE: Dziedziczenie + Polimorfizm - –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
class CardPayment(Payment):
    """
    üìã CHECK: Dziedziczenie - CardPayment –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Payment
    üìã CHECK: Polimorfizm - –°–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è process_payment()
    –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π (–∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏–ª–∏ –¥–µ–±–µ—Ç–æ–≤–æ–π)
    """

    def __init__(self, amount: float, card_number: str, cardholder_name: str,
                 expiry_month: int, expiry_year: int, cvv: str,
                 currency: CurrencyType = CurrencyType.USD, order_id: str = ""):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(amount, currency, order_id, "Card payment")

        # üîÑ TRANSFER: Payment.__init__ ‚Üí CardPayment.__init__
        log_transfer("Payment.__init__", "CardPayment.__init__", "card specific attributes")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞—Ä—Ç –∞—Ç—Ä–∏–±—É—Ç—ã
        self._card_number = card_number  # –ë—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã
        self.cardholder_name = cardholder_name
        self.expiry_month = expiry_month
        self.expiry_year = expiry_year
        self._cvv = cvv  # –ü—Ä–∏–≤–∞—Ç–Ω—ã–π CVV
        self._card_type = self._detect_card_type(card_number)
        self._authorization_code: Optional[str] = None
        self._merchant_id = "MCDONALDS_001"

        # –ú–∞—Å–∫–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
        self._masked_card_number = self._mask_card_number(card_number)

        log_requirement_check("Inheritance", "SUCCESS", f"CardPayment extends Payment: {self.payment_id}")

    # ‚úÖ WYMAGANIE: Polimorfizm - –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç
    def process_payment(self) -> bool:
        """
        üìã CHECK: Polimorfizm - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç–æ—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
            if not self.validate_payment_data():
                raise CardDeclinedException(self._get_last_four(), "Invalid card data")

            self.status = PaymentStatus.PROCESSING

            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            self._authorization_code = self._simulate_authorization()
            if not self._authorization_code:
                raise CardDeclinedException(self._get_last_four(), "Authorization failed")

            self.status = PaymentStatus.AUTHORIZED

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            self._transaction_fee = self.calculate_fees()

            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞—Ö–≤–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
            if self._simulate_capture():
                self.status = PaymentStatus.COMPLETED
                log_business_rule("Card Payment Processed",
                                  f"Card ending in {self._get_last_four()}: ${self.amount:.2f}")
                return True
            else:
                raise PaymentProcessingException("card", self.amount, "Capture failed")

        except (CardDeclinedException, PaymentProcessingException):
            self.status = PaymentStatus.FAILED
            raise
        except Exception as e:
            self.status = PaymentStatus.FAILED
            raise PaymentProcessingException("card", self.amount, str(e))

    def get_payment_method(self) -> PaymentMethod:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –∫–∞—Ä—Ç–æ—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        return PaymentMethod.CREDIT_CARD if self._card_type in ["visa", "mastercard",
                                                                "amex"] else PaymentMethod.DEBIT_CARD

    def validate_payment_data(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        if len(self._card_number.replace(" ", "")) < 13:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        now = datetime.now()
        if self.expiry_year < now.year or (self.expiry_year == now.year and self.expiry_month < now.month):
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CVV
        if len(self._cvv) < 3:
            return False

        return True

    def calculate_fees(self) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –∫–∞—Ä—Ç"""
        # –†–∞–∑–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–∞—Ä—Ç
        fee_rates = {
            "visa": 0.029,  # 2.9%
            "mastercard": 0.029,  # 2.9%
            "amex": 0.035,  # 3.5%
            "discover": 0.032,  # 3.2%
            "unknown": 0.030  # 3.0%
        }

        rate = fee_rates.get(self._card_type, 0.030)
        return round(self.amount * rate, 2)

    # ‚úÖ WYMAGANIE: @staticmethod - –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞—Ä—Ç
    @staticmethod
    def _detect_card_type(card_number: str) -> str:
        """
        üìã CHECK: @staticmethod - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
        """
        cleaned = card_number.replace(" ", "").replace("-", "")

        if cleaned.startswith("4"):
            return "visa"
        elif cleaned.startswith(("51", "52", "53", "54", "55")) or cleaned.startswith("22"):
            return "mastercard"
        elif cleaned.startswith(("34", "37")):
            return "amex"
        elif cleaned.startswith("6011") or cleaned.startswith("65"):
            return "discover"
        else:
            return "unknown"

    @staticmethod
    def _mask_card_number(card_number: str) -> str:
        """–ú–∞—Å–∫–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"""
        cleaned = card_number.replace(" ", "").replace("-", "")
        if len(cleaned) >= 4:
            return f"****-****-****-{cleaned[-4:]}"
        return "****-****-****-****"

    # ‚úÖ WYMAGANIE: Wiele konstruktor√≥w
    @classmethod
    def create_contactless_payment(cls, amount: float, card_token: str, currency: CurrencyType = CurrencyType.USD):
        """
        üìã CHECK: Wiele konstruktor√≥w - –±–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –æ–ø–ª–∞—Ç–∞
        """
        # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –±–µ—Å–∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        payment = cls(amount, "****-****-****-0000", "CONTACTLESS", 12, 2025, "000", currency)
        payment.add_metadata("payment_type", "contactless")
        payment.add_metadata("card_token", card_token)

        log_requirement_check("Multiple Constructors", "EXECUTED", "CardPayment.create_contactless_payment()")
        return payment

    @classmethod
    def create_recurring_payment(cls, amount: float, saved_card_id: str):
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–ª–∞—Ç–µ–∂ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ–π"""
        payment = cls(amount, "****-****-****-0000", "SAVED CARD", 12, 2025, "000")
        payment.add_metadata("payment_type", "recurring")
        payment.add_metadata("saved_card_id", saved_card_id)
        return payment

    def _simulate_authorization(self) -> Optional[str]:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–ª–∞—Ç–µ–∂–∞"""
        # –ü—Ä–æ—Å—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è - 95% —É—Å–ø–µ—Ö
        if random.random() < 0.95:
            auth_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
            self.add_metadata("authorization_code", auth_code)
            return auth_code
        return None

    def _simulate_capture(self) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –∑–∞—Ö–≤–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤"""
        # 98% —É—Å–ø–µ—Ö –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return random.random() < 0.98

    def _get_last_four(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã"""
        return self._card_number[-4:] if len(self._card_number) >= 4 else "0000"

    @property
    def masked_card_number(self) -> str:
        """–ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã"""
        return self._masked_card_number

    @property
    def card_type(self) -> str:
        """–¢–∏–ø –∫–∞—Ä—Ç—ã"""
        return self._card_type


# ‚úÖ WYMAGANIE: Dziedziczenie + Polimorfizm - –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞
class MobilePayment(Payment):
    """
    üìã CHECK: Dziedziczenie - MobilePayment –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Payment
    üìã CHECK: Polimorfizm - –°–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è process_payment()
    –ú–æ–±–∏–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (Apple Pay, Google Pay, Samsung Pay)
    """

    def __init__(self, amount: float, mobile_provider: str, device_id: str,
                 currency: CurrencyType = CurrencyType.USD, order_id: str = ""):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(amount, currency, order_id, f"{mobile_provider} payment")

        # üîÑ TRANSFER: Payment.__init__ ‚Üí MobilePayment.__init__
        log_transfer("Payment.__init__", "MobilePayment.__init__", "mobile payment attributes")

        self.mobile_provider = mobile_provider  # "apple_pay", "google_pay", "samsung_pay"
        self.device_id = device_id
        self._biometric_verified = False
        self._token_used: Optional[str] = None

        log_requirement_check("Inheritance", "SUCCESS", f"MobilePayment extends Payment: {self.payment_id}")

    # ‚úÖ WYMAGANIE: Polimorfizm - –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    def process_payment(self) -> bool:
        """
        üìã CHECK: Polimorfizm - –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            if not self.validate_payment_data():
                raise PaymentProcessingException("mobile", self.amount, "Invalid mobile payment data")

            self.status = PaymentStatus.PROCESSING

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–æ–º–µ—Ç—Ä–∏–∫—É
            if not self._verify_biometrics():
                raise PaymentProcessingException("mobile", self.amount, "Biometric verification failed")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
            self._token_used = self._generate_payment_token()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏–∏
            self._transaction_fee = self.calculate_fees()

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
            if self._process_with_provider():
                self.status = PaymentStatus.COMPLETED
                log_business_rule("Mobile Payment Processed",
                                  f"{self.mobile_provider} payment: ${self.amount:.2f}")
                return True
            else:
                raise PaymentProcessingException("mobile", self.amount, "Provider processing failed")

        except Exception as e:
            self.status = PaymentStatus.FAILED
            raise PaymentProcessingException("mobile", self.amount, str(e))

    def get_payment_method(self) -> PaymentMethod:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        return PaymentMethod.MOBILE_PAY

    def validate_payment_data(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        valid_providers = ["apple_pay", "google_pay", "samsung_pay", "android_pay"]
        if self.mobile_provider.lower() not in valid_providers:
            return False

        if not self.device_id or len(self.device_id) < 10:
            return False

        return True

    def calculate_fees(self) -> float:
        """–ö–æ–º–∏—Å—Å–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–æ–±—ã—á–Ω–æ –Ω–∏–∂–µ —á–µ–º —É –∫–∞—Ä—Ç)"""
        return round(self.amount * 0.025, 2)  # 2.5%

    # ‚úÖ WYMAGANIE: Wiele konstruktor√≥w
    @classmethod
    def create_apple_pay(cls, amount: float, touch_id: str, currency: CurrencyType = CurrencyType.USD):
        """
        üìã CHECK: Wiele konstruktor√≥w - Apple Pay –ø–ª–∞—Ç–µ–∂
        """
        payment = cls(amount, "apple_pay", touch_id, currency)
        payment.add_metadata("biometric_type", "touch_id")

        log_requirement_check("Multiple Constructors", "EXECUTED", "MobilePayment.create_apple_pay()")
        return payment

    @classmethod
    def create_google_pay(cls, amount: float, android_id: str, currency: CurrencyType = CurrencyType.USD):
        """Google Pay –ø–ª–∞—Ç–µ–∂"""
        payment = cls(amount, "google_pay", android_id, currency)
        payment.add_metadata("biometric_type", "fingerprint")
        return payment

    def _verify_biometrics(self) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –±–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        # 97% —É—Å–ø–µ—Ö –¥–ª—è –±–∏–æ–º–µ—Ç—Ä–∏–∫–∏
        self._biometric_verified = random.random() < 0.97
        self.add_metadata("biometric_verified", self._biometric_verified)
        return self._biometric_verified

    def _generate_payment_token(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–∞"""
        token = f"TKN{datetime.now().strftime('%Y%m%d%H%M%S')}{random.randint(1000, 9999)}"
        self.add_metadata("payment_token", token)
        return token

    def _process_with_provider(self) -> bool:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        # 96% —É—Å–ø–µ—Ö –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        return random.random() < 0.96


# ‚úÖ WYMAGANIE: Dziedziczenie + Polimorfizm - –ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞
class GiftCardPayment(Payment):
    """
    üìã CHECK: Dziedziczenie - GiftCardPayment –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Payment
    üìã CHECK: Polimorfizm - –°–≤–æ—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è process_payment()
    –û–ø–ª–∞—Ç–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç–æ–π McDonald's
    """

    def __init__(self, amount: float, gift_card_number: str, balance: float,
                 currency: CurrencyType = CurrencyType.USD, order_id: str = ""):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(amount, currency, order_id, "Gift card payment")

        # üîÑ TRANSFER: Payment.__init__ ‚Üí GiftCardPayment.__init__
        log_transfer("Payment.__init__", "GiftCardPayment.__init__", "gift card attributes")

        self.gift_card_number = gift_card_number
        self._current_balance = balance
        self._remaining_balance = balance - amount

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if balance < amount:
            raise InsufficientGiftCardBalanceException(amount, balance, gift_card_number)

        log_requirement_check("Inheritance", "SUCCESS", f"GiftCardPayment extends Payment: {self.payment_id}")

    # ‚úÖ WYMAGANIE: Polimorfizm - –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∫–∞—Ä—Ç
    def process_payment(self) -> bool:
        """
        üìã CHECK: Polimorfizm - –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç–æ–π
        """
        try:
            if not self.validate_payment_data():
                raise PaymentProcessingException("gift_card", self.amount, "Invalid gift card")

            self.status = PaymentStatus.PROCESSING

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
            if self._current_balance < self.amount:
                raise InsufficientGiftCardBalanceException(self.amount, self._current_balance, self.gift_card_number)

            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
            self._remaining_balance = self._current_balance - self.amount

            # –ö–æ–º–∏—Å—Å–∏–∏
            self._transaction_fee = self.calculate_fees()

            self.status = PaymentStatus.COMPLETED
            log_business_rule("Gift Card Payment",
                              f"Card {self.gift_card_number}: ${self.amount:.2f}, remaining: ${self._remaining_balance:.2f}")
            return True

        except Exception as e:
            self.status = PaymentStatus.FAILED
            raise PaymentProcessingException("gift_card", self.amount, str(e))

    def get_payment_method(self) -> PaymentMethod:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç–æ–¥ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã"""
        return PaymentMethod.GIFT_CARD

    def validate_payment_data(self) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ–¥–∞—Ä–æ—á–Ω—É—é –∫–∞—Ä—Ç—É"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
        if len(self.gift_card_number) != 16:
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Ü–∏—Ñ—Ä—ã
        if not self.gift_card_number.isdigit():
            return False

        return True

    def calculate_fees(self) -> float:
        """–î–ª—è –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –∫–∞—Ä—Ç McDonald's –Ω–µ—Ç –∫–æ–º–∏—Å—Å–∏–π"""
        return 0.0

    # ‚úÖ WYMAGANIE: Wiele konstruktor√≥w
    @classmethod
    def create_from_card_scan(cls, amount: float, scanned_data: str):
        """
        üìã CHECK: Wiele konstruktor√≥w - —Å–æ–∑–¥–∞–Ω–∏–µ –∏–∑ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        # –ü–∞—Ä—Å–∏–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
        card_number = scanned_data[:16] if len(scanned_data) >= 16 else "1234567890123456"
        balance = 50.00  # –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞

        payment = cls(amount, card_number, balance)
        payment.add_metadata("scan_source", "barcode_scanner")

        log_requirement_check("Multiple Constructors", "EXECUTED", "GiftCardPayment.create_from_card_scan()")
        return payment

    @property
    def remaining_balance(self) -> float:
        """–û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –∫–∞—Ä—Ç–µ –ø–æ—Å–ª–µ –ø–ª–∞—Ç–µ–∂–∞"""
        return self._remaining_balance

    def check_balance(self) -> float:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã"""
        return self._current_balance


# ‚úÖ WYMAGANIE: Polimorfizm - –§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—â–∞—è –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º
def process_payment_polymorphic(payment: Payment) -> Dict[str, Any]:
    """
    üìã CHECK: Polimorfizm - –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –ø–ª–∞—Ç–µ–∂–∞
    –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º —Ç–∏–ø–æ–º –ø–ª–∞—Ç–µ–∂–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ
    """
    log_operation("Polymorphic Payment Processing", {
        "payment_id": payment.payment_id,
        "method": payment.get_payment_method().value,
        "amount": payment.amount
    })

    try:
        # –û–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
        success = payment.process_payment()

        result = {
            "success": success,
            "payment_id": payment.payment_id,
            "method": payment.get_payment_method().value,
            "amount": payment.amount,
            "status": payment.status.value,
            "transaction_fee": payment.transaction_fee,
            "net_amount": payment.net_amount
        }

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if isinstance(payment, CashPayment):
            result["change"] = payment.change_amount
        elif isinstance(payment, CardPayment):
            result["card_type"] = payment.card_type
            result["masked_card"] = payment.masked_card_number
        elif isinstance(payment, MobilePayment):
            result["provider"] = payment.mobile_provider
        elif isinstance(payment, GiftCardPayment):
            result["remaining_balance"] = payment.remaining_balance

        log_business_rule("Polymorphic Success", f"Payment {payment.payment_id} processed successfully")
        return result

    except Exception as e:
        log_business_rule("Polymorphic Failure", f"Payment {payment.payment_id} failed: {str(e)}")
        return {
            "success": False,
            "payment_id": payment.payment_id,
            "method": payment.get_payment_method().value,
            "error": str(e),
            "status": payment.status.value
        }


# –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π
def demo_payment_system():
    """
    üìã CHECK: –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π McDonald's —Å –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–æ–º
    """

    print("üí≥ McDONALD'S PAYMENT SYSTEM DEMO")
    print("=" * 50)

    # üîÑ TRANSFER: demo ‚Üí payment classes
    log_transfer("demo_payment_system", "Payment classes", "payment creation")

    # 1. ‚úÖ WYMAGANIE: Polimorfizm - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    print("\n1. POLYMORPHISM - Different Payment Types")
    print("-" * 30)

    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–ª–∞—Ç–µ–∂–µ–π
    cash_payment = CashPayment.create_exact_change(15.99)
    card_payment = CardPayment.create_contactless_payment(23.45, "CTLS_TOKEN_123")
    mobile_payment = MobilePayment.create_apple_pay(18.75, "TOUCH_ID_456")
    gift_card_payment = GiftCardPayment.create_from_card_scan(12.50, "1234567890123456789")

    payments = [cash_payment, card_payment, mobile_payment, gift_card_payment]

    # 2. ‚úÖ WYMAGANIE: Polimorfizm - –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    print("\n2. POLYMORPHIC PROCESSING")
    print("-" * 30)

    for payment in payments:
        print(f"Processing: {payment}")
        result = process_payment_polymorphic(payment)  # –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤!

        if result["success"]:
            print(f"‚úÖ Success: {result['method']} - ${result['amount']:.2f}")
            print(f"   Fee: ${result['transaction_fee']:.2f}, Net: ${result['net_amount']:.2f}")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if "change" in result:
                print(f"   Change: ${result['change']:.2f}")
            elif "card_type" in result:
                print(f"   Card: {result['card_type']} {result['masked_card']}")
            elif "provider" in result:
                print(f"   Provider: {result['provider']}")
            elif "remaining_balance" in result:
                print(f"   Remaining balance: ${result['remaining_balance']:.2f}")
        else:
            print(f"‚ùå Failed: {result.get('error', 'Unknown error')}")
        print()

    # 3. ‚úÖ WYMAGANIE: @classmethod –∏ @staticmethod
    print("\n3. CLASS AND STATIC METHODS")
    print("-" * 30)

    # @classmethod
    total_stats = Payment.get_total_processed()
    print(f"Total payments processed: {total_stats['count']}")
    print(f"Total amount: ${total_stats['total_amount']:.2f}")
    print(f"By method: {total_stats['by_method']}")

    # @staticmethod
    converted_amount = Payment.convert_currency(100.0, CurrencyType.USD, CurrencyType.EUR)
    print(f"Currency conversion: $100.00 USD = ‚Ç¨{converted_amount:.2f} EUR")

    processing_fee = Payment.calculate_processing_fee(50.0, 0.035)
    print(f"Processing fee for $50.00 at 3.5%: ${processing_fee:.2f}")

    # 4. ‚úÖ WYMAGANIE: Enkapsulacja - Property usage
    print("\n4. ENCAPSULATION (Properties)")
    print("-" * 30)

    payment = card_payment
    print(f"Payment ID (read-only): {payment.payment_id}")
    print(f"Original status: {payment.status.value}")

    # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ setter
    payment.status = PaymentStatus.PROCESSING
    print(f"Updated status: {payment.status.value}")

    print(f"Transaction fee: ${payment.transaction_fee:.2f}")
    print(f"Net amount: ${payment.net_amount:.2f}")

    # 5. –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
    print("\n5. TYPE-SPECIFIC FEATURES")
    print("-" * 30)

    # –ù–∞–ª–∏—á–Ω—ã–µ
    cash_large = CashPayment.create_large_bill_payment(8.99, 20)
    print(f"Large bill payment: ${cash_large.amount:.2f} with $20, change: ${cash_large.change_amount:.2f}")

    # –ö–∞—Ä—Ç–∞
    card_type = CardPayment._detect_card_type("4111111111111111")
    print(f"Card type detection: 4111111111111111 is {card_type}")

    # –ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –∫–∞—Ä—Ç–∞
    gift_balance = gift_card_payment.check_balance()
    print(f"Gift card balance check: ${gift_balance:.2f}")

    # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    print("\n6. ERROR HANDLING")
    print("-" * 30)

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
        insufficient_cash = CashPayment(25.00, 20.00)  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ª–∏—á–Ω—ã—Ö
    except InsufficientFundsException as e:
        print(f"‚ùå Insufficient funds: {e}")

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –ø–æ–¥–∞—Ä–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã
        insufficient_gift = GiftCardPayment(100.00, "1111222233334444", 50.00)
    except InsufficientGiftCardBalanceException as e:
        print(f"‚ùå Gift card insufficient: {e}")

    # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    print("\n7. PAYMENT STATISTICS")
    print("-" * 30)

    for payment in payments:
        summary = payment.get_payment_summary()
        print(f"{summary['payment_id']}: {summary['method']} - ${summary['amount']:.2f} ({summary['status']})")

    # üìã CHECK: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–∏–º–æ—Ä—Ñ–∏–∑–º–∞
    log_requirement_check("Polymorphism Demo", "COMPLETED", "payment.py")
    log_requirement_check("Payment System Demo", "COMPLETED", "payment.py")

    return payments


if __name__ == "__main__":
    demo_payment_system()