"""
McDonald's Management System - Menu Models
‚úÖ WYMAGANIE: U≈ºycie klas, dziedziczenie, nadpisywanie atrybut√≥w i metod,
             @classmethod, @staticmethod, enkapsulacja, super()

–ú–æ–¥–µ–ª–∏ –º–µ–Ω—é McDonald's —Å –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
"""

from abc import ABC, abstractmethod
from datetime import datetime, time
from typing import List, Dict, Optional, Any
from enum import Enum
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils.logger import log_transfer, log_requirement_check, log_operation, log_business_rule
from src.exceptions.mcdonalds_exceptions import MenuItemNotAvailableException, InsufficientIngredientsException


# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
class MenuCategory(Enum):
    BURGERS = "burgers"
    CHICKEN = "chicken"
    SIDES = "sides"
    DRINKS = "drinks"
    DESSERTS = "desserts"
    BREAKFAST = "breakfast"
    MCCAFE = "mccafe"
    HAPPY_MEAL = "happy_meal"


class ItemSize(Enum):
    SMALL = "small"
    MEDIUM = "medium"
    LARGE = "large"
    EXTRA_LARGE = "extra_large"


# ‚úÖ WYMAGANIE: U≈ºycie klas - –ë–∞–∑–æ–≤–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é
class MenuItem(ABC):
    """
    üìã CHECK: Klasy - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é McDonald's
    ‚úÖ WYMAGANIE: Enkapsulacja - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ property, getters, setters
    ‚úÖ WYMAGANIE: @classmethod, @staticmethod
    """

    # ‚úÖ WYMAGANIE: Atrybuty w klasach - –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞ –¥–ª—è —Å—á–µ—Ç—á–∏–∫–æ–≤
    total_items_created = 0
    available_categories = list(MenuCategory)

    def __init__(self, name: str, base_price: float, category: MenuCategory,
                 ingredients: List[str] = None, calories: int = 0):
        # üîÑ TRANSFER: menu.py ‚Üí logger (log_operation)
        log_operation("MenuItem Creation", {"name": name, "category": category.value})

        # –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è —ç–Ω–∫–∞–ø—Å—É–ª—è—Ü–∏–∏
        self._name = name
        self._base_price = base_price
        self._category = category
        self._ingredients = ingredients or []
        self._calories = calories
        self._available = True
        self._preparation_time = 5  # –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        self._nutritional_info = {}

        # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        MenuItem.total_items_created += 1

        # üìã CHECK: Klasy - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
        log_requirement_check("Class Creation", "SUCCESS", f"MenuItem: {name}")

    # ‚úÖ WYMAGANIE: Enkapsulacja - Property with getter and setter
    @property
    def name(self) -> str:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏"""
        return self._name

    @name.setter
    def name(self, value: str):
        """
        üìã CHECK: Enkapsulacja - Setter —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        –°–µ—Ç—Ç–µ—Ä –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        """
        if not value or not value.strip():
            raise ValueError("Name cannot be empty")
        old_name = self._name
        self._name = value.strip()
        # üö® LOG: –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        log_operation("Name Change", {"old": old_name, "new": self._name})

    @property
    def base_price(self) -> float:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ü–µ–Ω—ã"""
        return self._base_price

    @base_price.setter
    def base_price(self, value: float):
        """
        üìã CHECK: Enkapsulacja - Price validation
        –°–µ—Ç—Ç–µ—Ä –¥–ª—è —Ü–µ–Ω—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
        """
        if value < 0:
            raise ValueError("Price cannot be negative")
        old_price = self._base_price
        self._base_price = value
        log_business_rule("Price Change", f"{self.name}: ${old_price:.2f} ‚Üí ${value:.2f}")

    @property
    def available(self) -> bool:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        return self._available

    @available.setter
    def available(self, value: bool):
        """–°–µ—Ç—Ç–µ—Ä –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
        self._available = bool(value)
        status = "AVAILABLE" if value else "UNAVAILABLE"
        log_business_rule("Availability Change", f"{self.name}: {status}")

    @property
    def calories(self) -> int:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –∫–∞–ª–æ—Ä–∏–π"""
        return self._calories

    @calories.setter
    def calories(self, value: int):
        """–°–µ—Ç—Ç–µ—Ä –¥–ª—è –∫–∞–ª–æ—Ä–∏–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if value < 0:
            raise ValueError("Calories cannot be negative")
        self._calories = value

    @property
    def ingredients(self) -> List[str]:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""
        return self._ingredients.copy()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

    # ‚úÖ WYMAGANIE: @classmethod - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    @classmethod
    def create_big_mac(cls):
        """
        üìã CHECK: @classmethod - Factory method –¥–ª—è Big Mac
        Factory method –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Big Mac
        """
        # üîÑ TRANSFER: menu.py ‚Üí MenuItem.__init__ (create_big_mac data)
        log_transfer("menu.py", "MenuItem.__init__", "Big Mac creation data")

        ingredients = ["special sauce", "lettuce", "cheese", "pickles", "onions", "sesame seed bun", "beef patty"]
        big_mac = cls("Big Mac", 4.99, MenuCategory.BURGERS, ingredients, 550)
        big_mac._preparation_time = 8

        log_requirement_check("@classmethod", "EXECUTED", "MenuItem.create_big_mac()")
        return big_mac

    @classmethod
    def create_happy_meal(cls, main_item: str, drink: str = "Apple Juice", toy: str = "Random"):
        """Factory method –¥–ª—è Happy Meal"""
        ingredients = [main_item, drink, "apple slices", toy]
        happy_meal = cls(f"Happy Meal ({main_item})", 3.99, MenuCategory.HAPPY_MEAL, ingredients, 400)
        return happy_meal

    @classmethod
    def get_total_items_created(cls) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        return cls.total_items_created

    # ‚úÖ WYMAGANIE: @staticmethod - –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —ç–∫–∑–µ–º–ø–ª—è—Ä—É
    @staticmethod
    def calculate_calories_with_size(base_calories: int, size: ItemSize) -> int:
        """
        üìã CHECK: @staticmethod - –†–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
        –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞
        """
        log_requirement_check("@staticmethod", "EXECUTED", "MenuItem.calculate_calories_with_size()")

        size_multipliers = {
            ItemSize.SMALL: 0.8,
            ItemSize.MEDIUM: 1.0,
            ItemSize.LARGE: 1.3,
            ItemSize.EXTRA_LARGE: 1.6
        }

        multiplier = size_multipliers.get(size, 1.0)
        result = int(base_calories * multiplier)

        # üö® LOG: –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∫–∞–ª–æ—Ä–∏–π
        log_operation("Calorie Calculation", {
            "base": base_calories,
            "size": size.value,
            "multiplier": multiplier,
            "result": result
        })

        return result

    @staticmethod
    def is_breakfast_time() -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—Ä–µ–º—è –ª–∏ –∑–∞–≤—Ç—Ä–∞–∫–∞ (–¥–æ 10:30)"""
        now = datetime.now().time()
        breakfast_end = time(10, 30)  # 10:30 AM
        return now <= breakfast_end

    @staticmethod
    def calculate_discount_price(original_price: float, discount_percent: float) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–Ω—É —Å–æ —Å–∫–∏–¥–∫–æ–π"""
        if not 0 <= discount_percent <= 100:
            raise ValueError("Discount percent must be between 0 and 100")
        return original_price * (1 - discount_percent / 100)

    # –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
    @abstractmethod
    def get_final_price(self, size: ItemSize = ItemSize.MEDIUM) -> float:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–º–µ—Ä–∞"""
        pass

    @abstractmethod
    def get_preparation_time(self) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        pass

    # –û–±—ã—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def add_ingredient(self, ingredient: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"""
        if ingredient not in self._ingredients:
            self._ingredients.append(ingredient)
            log_business_rule("Ingredient Added", f"{self.name}: +{ingredient}")

    def remove_ingredient(self, ingredient: str):
        """–£–±–∏—Ä–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç"""
        if ingredient in self._ingredients:
            self._ingredients.remove(ingredient)
            log_business_rule("Ingredient Removed", f"{self.name}: -{ingredient}")

    def __str__(self) -> str:
        return f"{self.name} - ${self.base_price:.2f} ({self._category.value})"

    def __repr__(self) -> str:
        return f"MenuItem(name='{self.name}', price=${self.base_price:.2f}, category={self._category.value})"


# ‚úÖ WYMAGANIE: Dziedziczenie - –ö–ª–∞—Å—Å Burger –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç MenuItem
class Burger(MenuItem):
    """
    üìã CHECK: Dziedziczenie - Burger –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç MenuItem
    ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w i metod w klasach potomnych
    ‚úÖ WYMAGANIE: super() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞
    default_preparation_time = 6  # –º–∏–Ω—É—Ç (–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∏–∑ –±–∞–∑–æ–≤–æ–≥–æ 5)
    category_name = "McDonald's Burgers"

    def __init__(self, name: str, base_price: float, patty_count: int = 1,
                 has_cheese: bool = True, ingredients: List[str] = None):
        # ‚úÖ WYMAGANIE: super() - –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        super().__init__(name, base_price, MenuCategory.BURGERS, ingredients)

        # üîÑ TRANSFER: menu.py ‚Üí Burger.__init__ (burger specific data)
        log_transfer("MenuItem.__init__", "Burger.__init__", "burger-specific attributes")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –±—É—Ä–≥–µ—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.patty_count = patty_count
        self.has_cheese = has_cheese
        self._is_signature = False

        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        self._preparation_time = self.default_preparation_time + (patty_count - 1) * 2

        # üìã CHECK: Dziedziczenie - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        log_requirement_check("Inheritance", "SUCCESS", f"Burger extends MenuItem: {name}")

    # ‚úÖ WYMAGANIE: Nadpisywanie metod - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
    def get_final_price(self, size: ItemSize = ItemSize.MEDIUM) -> float:
        """
        üìã CHECK: Nadpisywanie metod - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è –±—É—Ä–≥–µ—Ä–∞
        """
        # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        base = self.base_price

        # –î–æ–±–∞–≤–∫–∞ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ—Ç–ª–µ—Ç—ã
        if self.patty_count > 1:
            base += (self.patty_count - 1) * 1.50

        # –î–æ–±–∞–≤–∫–∞ –∑–∞ —Å—ã—Ä
        if self.has_cheese:
            base += 0.50

        # –ú–Ω–æ–∂–∏—Ç–µ–ª—å –∑–∞ —Ä–∞–∑–º–µ—Ä (–¥–ª—è –±—É—Ä–≥–µ—Ä–æ–≤ —Ä–∞–∑–º–µ—Ä –≤–ª–∏—è–µ—Ç –Ω–∞ —Ñ—Ä–∏ –∏ –Ω–∞–ø–∏—Ç–æ–∫ –≤ –∫–æ–º–±–æ)
        size_multiplier = {
            ItemSize.SMALL: 0.9,
            ItemSize.MEDIUM: 1.0,
            ItemSize.LARGE: 1.2
        }.get(size, 1.0)

        final_price = base * size_multiplier

        # üö® LOG: –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
        log_operation("Burger Price Calculation", {
            "base_price": self.base_price,
            "patties": self.patty_count,
            "has_cheese": self.has_cheese,
            "size": size.value,
            "final_price": final_price
        })

        return final_price

    def get_preparation_time(self) -> int:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        # ‚úÖ WYMAGANIE: super() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –ø–ª—é—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        base_time = self._preparation_time

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è signature –±—É—Ä–≥–µ—Ä–æ–≤
        if self._is_signature:
            base_time += 2

        return base_time

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±—É—Ä–≥–µ—Ä–æ–≤
    def make_signature(self):
        """–î–µ–ª–∞–µ—Ç –±—É—Ä–≥–µ—Ä signature (–ø—Ä–µ–º–∏—É–º)"""
        self._is_signature = True
        self.base_price += 2.00
        log_business_rule("Signature Upgrade", f"{self.name} upgraded to signature")

    def add_extra_patty(self):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–æ—Ç–ª–µ—Ç—É"""
        self.patty_count += 1
        self._preparation_time += 2
        log_business_rule("Extra Patty", f"{self.name}: now {self.patty_count} patties")

    def __str__(self) -> str:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"""
        cheese_info = "with cheese" if self.has_cheese else "no cheese"
        patty_info = f"{self.patty_count} patty" if self.patty_count == 1 else f"{self.patty_count} patties"
        return f"{self.name} ({patty_info}, {cheese_info}) - ${self.get_final_price():.2f}"


# ‚úÖ WYMAGANIE: Dziedziczenie - –ö–ª–∞—Å—Å Fries –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç MenuItem
class Fries(MenuItem):
    """
    üìã CHECK: Dziedziczenie - Fries (–∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏) –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç MenuItem
    McDonald's –∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞
    default_preparation_time = 3  # –ë—ã—Å—Ç—Ä–µ–µ —á–µ–º –±—É—Ä–≥–µ—Ä—ã
    category_name = "McDonald's Fries & Sides"

    def __init__(self, size: ItemSize = ItemSize.MEDIUM, seasoning: str = "salt"):
        # ‚úÖ WYMAGANIE: super() - –≤—ã–∑–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞
        name = f"French Fries ({size.value.title()})"
        base_price = self._get_price_by_size(size)
        ingredients = ["potato", "vegetable oil", seasoning]

        super().__init__(name, base_price, MenuCategory.SIDES, ingredients)

        # üîÑ TRANSFER: MenuItem.__init__ ‚Üí Fries.__init__ (size and seasoning data)
        log_transfer("MenuItem.__init__", "Fries.__init__", "fries-specific attributes")

        self.size = size
        self.seasoning = seasoning
        self._preparation_time = self.default_preparation_time

        log_requirement_check("Inheritance", "SUCCESS", f"Fries extends MenuItem: {name}")

    @staticmethod
    def _get_price_by_size(size: ItemSize) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞"""
        price_map = {
            ItemSize.SMALL: 1.99,
            ItemSize.MEDIUM: 2.49,
            ItemSize.LARGE: 2.99,
            ItemSize.EXTRA_LARGE: 3.49
        }
        return price_map.get(size, 2.49)

    # ‚úÖ WYMAGANIE: Nadpisywanie met–æ–¥ - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞
    def get_final_price(self, size: ItemSize = None) -> float:
        """
        üìã CHECK: Nadpisywanie metod - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–ª—è —Ñ—Ä–∏
        """
        # –î–ª—è —Ñ—Ä–∏ —Ä–∞–∑–º–µ—Ä —É–∂–µ —É—á—Ç–µ–Ω –≤ base_price
        final_price = self.base_price

        # –ü—Ä–µ–º–∏—É–º –∑–∞ –æ—Å–æ–±—ã–µ –ø—Ä–∏–ø—Ä–∞–≤—ã
        premium_seasonings = ["truffle", "parmesan", "cajun"]
        if self.seasoning.lower() in premium_seasonings:
            final_price += 0.75

        log_operation("Fries Price Calculation", {
            "size": self.size.value,
            "seasoning": self.seasoning,
            "base_price": self.base_price,
            "final_price": final_price
        })

        return final_price

    def get_preparation_time(self) -> int:
        """–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ñ—Ä–∏"""
        return self._preparation_time

    def upgrade_size(self, new_size: ItemSize):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ—Ä–∏"""
        if new_size.value > self.size.value:
            old_size = self.size
            self.size = new_size
            self._name = f"French Fries ({new_size.value.title()})"
            self.base_price = self._get_price_by_size(new_size)

            log_business_rule("Size Upgrade", f"Fries: {old_size.value} ‚Üí {new_size.value}")


# ‚úÖ WYMAGANIE: Dziedziczenie - –ö–ª–∞—Å—Å Drink –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç MenuItem
class Drink(MenuItem):
    """
    üìã CHECK: Dziedziczenie - Drink –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç MenuItem
    McDonald's –Ω–∞–ø–∏—Ç–∫–∏ (–≥–∞–∑–∏—Ä–æ–≤–∫–∞, –∫–æ—Ñ–µ, —Å–æ–∫–∏)
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w
    default_preparation_time = 2  # –°–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
    category_name = "McDonald's Beverages"

    def __init__(self, name: str, size: ItemSize = ItemSize.MEDIUM,
                 is_hot: bool = False, has_caffeine: bool = False):
        # ‚úÖ WYMAGANIE: super()
        base_price = self._get_price_by_size(size)
        category = MenuCategory.MCCAFE if is_hot else MenuCategory.DRINKS

        super().__init__(name, base_price, category)

        # üîÑ TRANSFER: MenuItem.__init__ ‚Üí Drink.__init__ (drink attributes)
        log_transfer("MenuItem.__init__", "Drink.__init__", "drink-specific attributes")

        self.size = size
        self.is_hot = is_hot
        self.has_caffeine = has_caffeine
        self._ice_level = "normal" if not is_hot else "none"
        self._preparation_time = self.default_preparation_time

        # –ì–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –¥–æ–ª—å—à–µ
        if is_hot:
            self._preparation_time += 3

        log_requirement_check("Inheritance", "SUCCESS", f"Drink extends MenuItem: {name}")

    @staticmethod
    def _get_price_by_size(size: ItemSize) -> float:
        """–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –Ω–∞–ø–∏—Ç–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É"""
        price_map = {
            ItemSize.SMALL: 1.49,
            ItemSize.MEDIUM: 1.79,
            ItemSize.LARGE: 2.09,
            ItemSize.EXTRA_LARGE: 2.39
        }
        return price_map.get(size, 1.79)

    # ‚úÖ WYMAGANIE: Nadpisywanie met–æ–¥
    def get_final_price(self, size: ItemSize = None) -> float:
        """
        üìã CHECK: Nadpisywanie met–æ–¥ - —Ä–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –Ω–∞–ø–∏—Ç–∫–∞
        """
        final_price = self.base_price

        # –ü—Ä–µ–º–∏—É–º –∑–∞ –≥–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏ McCafe
        if self.is_hot and self.has_caffeine:
            final_price += 1.00

        log_operation("Drink Price Calculation", {
            "name": self.name,
            "size": self.size.value,
            "is_hot": self.is_hot,
            "has_caffeine": self.has_caffeine,
            "final_price": final_price
        })

        return final_price

    def get_preparation_time(self) -> int:
        """–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞"""
        return self._preparation_time

    # ‚úÖ WYMAGANIE: @classmethod - —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ factory methods –¥–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤
    @classmethod
    def create_coca_cola(cls, size: ItemSize = ItemSize.MEDIUM):
        """Factory method –¥–ª—è Coca-Cola"""
        drink = cls("Coca-Cola", size, is_hot=False, has_caffeine=True)
        drink.add_ingredient("coca-cola syrup")
        drink.add_ingredient("carbonated water")
        return drink

    @classmethod
    def create_mccafe_coffee(cls, coffee_type: str = "Latte", size: ItemSize = ItemSize.MEDIUM):
        """Factory method –¥–ª—è McCafe –∫–æ—Ñ–µ"""
        name = f"McCafe {coffee_type}"
        drink = cls(name, size, is_hot=True, has_caffeine=True)
        drink.add_ingredient("espresso")
        drink.add_ingredient("milk")
        if coffee_type.lower() == "cappuccino":
            drink.add_ingredient("foam")
        return drink

    def set_ice_level(self, level: str):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª—å–¥–∞ (no ice, light, normal, extra)"""
        valid_levels = ["none", "light", "normal", "extra"]
        if level.lower() in valid_levels:
            self._ice_level = level.lower()
            log_business_rule("Ice Level", f"{self.name}: {level} ice")


# ‚úÖ WYMAGANIE: Dziedziczenie - –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–æ–≤
class BreakfastItem(MenuItem):
    """
    üìã CHECK: Dziedziczenie - BreakfastItem –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–æ–≤ McDonald's
    –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–æ–≤ McDonald's (–¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ 10:30)
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w
    default_preparation_time = 7  # –ó–∞–≤—Ç—Ä–∞–∫–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è –¥–æ–ª—å—à–µ
    category_name = "McDonald's Breakfast"

    def __init__(self, name: str, base_price: float, has_egg: bool = False,
                 has_sausage: bool = False, ingredients: List[str] = None):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(name, base_price, MenuCategory.BREAKFAST, ingredients)

        # üîÑ TRANSFER: MenuItem.__init__ ‚Üí BreakfastItem.__init__
        log_transfer("MenuItem.__init__", "BreakfastItem.__init__", "breakfast attributes")

        self.has_egg = has_egg
        self.has_sausage = has_sausage
        self._preparation_time = self.default_preparation_time

        log_requirement_check("Inheritance", "SUCCESS", f"BreakfastItem extends MenuItem: {name}")

    # ‚úÖ WYMAGANIE: Nadpisywanie met–æ–¥
    def get_final_price(self, size: ItemSize = ItemSize.MEDIUM) -> float:
        """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        final_price = self.base_price

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç–∞ –∑–∞ —è–π—Ü–æ –∏ –∫–æ–ª–±–∞—Å—É
        if self.has_egg:
            final_price += 1.00
        if self.has_sausage:
            final_price += 1.50

        return final_price

    def get_preparation_time(self) -> int:
        """–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        return self._preparation_time

    @property
    def available(self) -> bool:
        """
        üìã CHECK: Enkapsulacja - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
        –ó–∞–≤—Ç—Ä–∞–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–æ 10:30
        """
        if not self.is_breakfast_time():
            return False
        return self._available

    @available.setter
    def available(self, value: bool):
        """–°–µ—Ç—Ç–µ—Ä —É—á–∏—Ç—ã–≤–∞—é—â–∏–π –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        if value and not self.is_breakfast_time():
            log_business_rule("Breakfast Availability", f"{self.name}: Not breakfast time, forcing unavailable")
            self._available = False
        else:
            self._available = bool(value)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –º–µ–Ω—é
def demo_menu_system():
    """
    üìã CHECK: –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–µ–Ω—é McDonald's
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –º–µ–Ω—é –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    """

    print("üçü McDONALD'S MENU SYSTEM DEMO")
    print("=" * 50)

    # üîÑ TRANSFER: demo ‚Üí menu classes (—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
    log_transfer("demo_menu_system", "MenuItem classes", "menu item creation")

    # 1. ‚úÖ WYMAGANIE: @classmethod - Factory methods
    print("\n1. FACTORY METHODS (@classmethod)")
    print("-" * 30)

    big_mac = MenuItem.create_big_mac()
    happy_meal = MenuItem.create_happy_meal("Chicken McNuggets", "Milk", "Pokemon Card")

    print(f"Created: {big_mac}")
    print(f"Created: {happy_meal}")

    # 2. ‚úÖ WYMAGANIE: Dziedziczenie + Nadpisywanie
    print("\n2. INHERITANCE & METHOD OVERRIDING")
    print("-" * 30)

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ä–≥–µ—Ä–∞
    quarter_pounder = Burger("Quarter Pounder", 5.49, patty_count=1, has_cheese=True)
    quarter_pounder.make_signature()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–∏
    large_fries = Fries(ItemSize.LARGE, "salt")

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–æ–≤
    coke = Drink.create_coca_cola(ItemSize.LARGE)
    coffee = Drink.create_mccafe_coffee("Cappuccino", ItemSize.MEDIUM)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≤—Ç—Ä–∞–∫–∞
    egg_mcmuffin = BreakfastItem("Egg McMuffin", 3.99, has_egg=True, has_sausage=True)

    menu_items = [quarter_pounder, large_fries, coke, coffee, egg_mcmuffin]

    for item in menu_items:
        print(f"üì± {item}")
        print(f"   Final Price: ${item.get_final_price():.2f}")
        print(f"   Prep Time: {item.get_preparation_time()} minutes")
        print(f"   Available: {item.available}")

    # 3. ‚úÖ WYMAGANIE: @staticmethod
    print("\n3. STATIC METHODS (@staticmethod)")
    print("-" * 30)

    base_calories = 550
    for size in ItemSize:
        calories = MenuItem.calculate_calories_with_size(base_calories, size)
        print(f"Big Mac {size.value}: {calories} calories")

    # 4. ‚úÖ WYMAGANIE: Enkapsulacja - Property usage
    print("\n4. ENCAPSULATION (Property)")
    print("-" * 30)

    print(f"Quarter Pounder original price: ${quarter_pounder.base_price:.2f}")
    quarter_pounder.base_price = 6.99  # –ò—Å–ø–æ–ª—å–∑—É–µ–º setter
    print(f"Quarter Pounder new price: ${quarter_pounder.base_price:.2f}")

    # 5. –°—á–µ—Ç—á–∏–∫–∏ –∫–ª–∞—Å—Å–æ–≤
    print("\n5. CLASS ATTRIBUTES")
    print("-" * 30)
    print(f"Total menu items created: {MenuItem.get_total_items_created()}")
    print(f"Available categories: {[cat.value for cat in MenuItem.available_categories]}")

    # üìã CHECK: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    log_requirement_check("Menu System Demo", "COMPLETED", "menu.py")

    return menu_items


if __name__ == "__main__":
    demo_menu_system()