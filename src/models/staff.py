"""
McDonald's Management System - Staff Models
‚úÖ WYMAGANIE: Dziedziczenie, nadpisywanie atrybut√≥w i metod, super(), @classmethod, @staticmethod

–ú–æ–¥–µ–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ McDonald's —Å –ø–æ–ª–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–µ–π –∏ —Ä–æ–ª—è–º–∏
"""

from abc import ABC, abstractmethod
from datetime import datetime, timedelta, time
from typing import List, Dict, Optional, Any, Set
from enum import Enum
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils.logger import log_transfer, log_requirement_check, log_operation, log_business_rule
from src.exceptions.mcdonalds_exceptions import UnauthorizedAccessException, ShiftOverlapException


# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è –¥–ª—è —Ä–æ–ª–µ–π –∏ —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞
class StaffRole(Enum):
    CREW_MEMBER = "crew_member"
    CASHIER = "cashier"
    KITCHEN_STAFF = "kitchen_staff"
    DRIVE_THRU = "drive_thru"
    MAINTENANCE = "maintenance"
    SHIFT_MANAGER = "shift_manager"
    ASSISTANT_MANAGER = "assistant_manager"
    GENERAL_MANAGER = "general_manager"
    FRANCHISE_OWNER = "franchise_owner"


class AccessLevel(Enum):
    BASIC = 1
    INTERMEDIATE = 2
    ADVANCED = 3
    MANAGEMENT = 4
    EXECUTIVE = 5


class ShiftType(Enum):
    MORNING = "morning"  # 6:00 - 14:00
    AFTERNOON = "afternoon"  # 14:00 - 22:00
    NIGHT = "night"  # 22:00 - 6:00
    BREAKFAST = "breakfast"  # 5:00 - 11:00


# ‚úÖ WYMAGANIE: U≈ºycie klas - –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
class Staff(ABC):
    """
    üìã CHECK: Klasy - –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ McDonald's
    ‚úÖ WYMAGANIE: Atrybuty w klasach - –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è
    """

    # ‚úÖ WYMAGANIE: Atrybuty w klasach - –∞—Ç—Ä–∏–±—É—Ç—ã –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
    base_salary = 15.00  # –ë–∞–∑–æ–≤–∞—è –ø–æ—á–∞—Å–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
    department = "general"
    required_access_level = AccessLevel.BASIC
    default_shift_hours = 8

    # –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
    total_employees = 0
    employees_by_role = {}

    def __init__(self, name: str, employee_id: str, role: StaffRole,
                 hire_date: datetime = None, phone: str = ""):
        # üîÑ TRANSFER: staff.py ‚Üí logger (employee creation)
        log_operation("Employee Creation", {"name": name, "role": role.value, "id": employee_id})

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.name = name
        self.employee_id = employee_id
        self.role = role
        self.hire_date = hire_date or datetime.now()
        self.phone = phone

        # –†–∞–±–æ—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        self._hourly_rate = self.base_salary
        self._access_level = self.required_access_level
        self._is_active = True
        self._total_hours_worked = 0
        self._shift_schedule: List[Dict] = []
        self._performance_rating = 3.0  # 1-5 scale

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–ª–∞—Å—Å–∞
        Staff.total_employees += 1
        if role.value not in Staff.employees_by_role:
            Staff.employees_by_role[role.value] = 0
        Staff.employees_by_role[role.value] += 1

        # üìã CHECK: Klasy - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞—Å—Å–∞
        log_requirement_check("Class Creation", "SUCCESS", f"Staff: {name} ({role.value})")

    # ‚úÖ WYMAGANIE: Enkapsulacja - Properties with getters and setters
    @property
    def hourly_rate(self) -> float:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏"""
        return self._hourly_rate

    @hourly_rate.setter
    def hourly_rate(self, value: float):
        """
        üìã CHECK: Enkapsulacja - Setter —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Å—Ç–∞–≤–∫–∏
        """
        if value < 10.0:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞
            raise ValueError("Hourly rate cannot be below $10.00")
        old_rate = self._hourly_rate
        self._hourly_rate = value
        log_business_rule("Salary Change", f"{self.name}: ${old_rate:.2f} ‚Üí ${value:.2f}/hour")

    @property
    def access_level(self) -> AccessLevel:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
        return self._access_level

    @access_level.setter
    def access_level(self, level: AccessLevel):
        """–°–µ—Ç—Ç–µ—Ä –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
        if level.value < self.required_access_level.value:
            raise UnauthorizedAccessException(
                self.employee_id,
                f"set_access_level({level.name})",
                self.required_access_level.name
            )
        self._access_level = level
        log_business_rule("Access Level Change", f"{self.name}: {level.name}")

    @property
    def is_active(self) -> bool:
        """–ì–µ—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        return self._is_active

    @is_active.setter
    def is_active(self, value: bool):
        """–°–µ—Ç—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self._is_active = bool(value)
        status = "ACTIVE" if value else "INACTIVE"
        log_business_rule("Employment Status", f"{self.name}: {status}")

    # ‚úÖ WYMAGANIE: Nadpisywanie metod - –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
    def work(self) -> str:
        """
        üìã CHECK: Nadpisywanie metod - –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ work(), –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
        –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã, –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
        """
        return f"{self.name} ({self.role.value}) is working at McDonald's"

    # –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–∞—Ö
    @abstractmethod
    def get_permissions(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Ä–æ–ª–∏"""
        pass

    # ‚úÖ WYMAGANIE: @classmethod - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    @classmethod
    def create_new_hire(cls, name: str, employee_id: str, role: StaffRole,
                        start_date: datetime = None):
        """
        üìã CHECK: @classmethod - Factory method –¥–ª—è –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        Factory method –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        """
        # üîÑ TRANSFER: staff.py ‚Üí Staff.__init__ (new hire data)
        log_transfer("Staff.create_new_hire", "Staff.__init__", "new hire data")

        start_date = start_date or datetime.now()
        employee = cls(name, employee_id, role, start_date)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞
        employee._performance_rating = 2.5  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
        employee.add_training_requirement("Orientation")
        employee.add_training_requirement("Food Safety")

        log_requirement_check("@classmethod", "EXECUTED", "Staff.create_new_hire()")
        log_business_rule("New Hire", f"{name} hired as {role.value}")

        return employee

    @classmethod
    def create_transfer_employee(cls, name: str, employee_id: str, role: StaffRole,
                                 previous_location: str, experience_years: int):
        """Factory method –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        employee = cls(name, employee_id, role)

        # –ë–æ–Ω—É—Å –∑–∞ –æ–ø—ã—Ç
        experience_bonus = min(experience_years * 0.50, 5.00)  # –ú–∞–∫—Å–∏–º—É–º $5 –±–æ–Ω—É—Å–∞
        employee._hourly_rate = cls.base_salary + experience_bonus
        employee._performance_rating = min(3.0 + (experience_years * 0.2), 5.0)

        log_business_rule("Transfer Employee",
                          f"{name} transferred from {previous_location} with {experience_years} years experience")

        return employee

    @classmethod
    def get_total_employees(cls) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        return cls.total_employees

    @classmethod
    def get_employees_by_role(cls) -> Dict[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ —Ä–æ–ª—è–º"""
        return cls.employees_by_role.copy()

    # ‚úÖ WYMAGANIE: @staticmethod - –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    @staticmethod
    def calculate_weekly_salary(hourly_rate: float, hours_worked: float,
                                overtime_hours: float = 0) -> float:
        """
        üìã CHECK: @staticmethod - –†–∞—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        """
        log_requirement_check("@staticmethod", "EXECUTED", "Staff.calculate_weekly_salary()")

        regular_pay = hourly_rate * hours_worked
        overtime_pay = overtime_hours * hourly_rate * 1.5  # –ü–æ–ª—É—Ç–æ—Ä–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞ —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ
        total = regular_pay + overtime_pay

        # üö® LOG: –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—á–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—ã
        log_operation("Salary Calculation", {
            "hourly_rate": hourly_rate,
            "regular_hours": hours_worked,
            "overtime_hours": overtime_hours,
            "regular_pay": regular_pay,
            "overtime_pay": overtime_pay,
            "total": total
        })

        return total

    @staticmethod
    def is_valid_employee_id(employee_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ID —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ñ–æ—Ä–º–∞—Ç: EMP + 4 —Ü–∏—Ñ—Ä—ã)"""
        if not employee_id.startswith("EMP") or len(employee_id) != 7:
            return False
        try:
            int(employee_id[3:])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ - —Ü–∏—Ñ—Ä—ã
            return True
        except ValueError:
            return False

    @staticmethod
    def get_shift_times(shift_type: ShiftType) -> tuple:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã"""
        shift_times = {
            ShiftType.MORNING: (time(6, 0), time(14, 0)),
            ShiftType.AFTERNOON: (time(14, 0), time(22, 0)),
            ShiftType.NIGHT: (time(22, 0), time(6, 0)),
            ShiftType.BREAKFAST: (time(5, 0), time(11, 0))
        }
        return shift_times.get(shift_type, (time(9, 0), time(17, 0)))

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–º–µ–Ω–∞–º–∏ –∏ –æ–±—É—á–µ–Ω–∏–µ–º
    def add_shift(self, date: datetime, shift_type: ShiftType, hours: float):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–º–µ–Ω—É –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
        shift = {
            "date": date,
            "shift_type": shift_type,
            "hours": hours,
            "completed": False
        }
        self._shift_schedule.append(shift)
        log_business_rule("Shift Scheduled", f"{self.name}: {shift_type.value} on {date.strftime('%Y-%m-%d')}")

    def complete_shift(self, date: datetime):
        """–û—Ç–º–µ—á–∞–µ—Ç —Å–º–µ–Ω—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
        for shift in self._shift_schedule:
            if shift["date"].date() == date.date() and not shift["completed"]:
                shift["completed"] = True
                self._total_hours_worked += shift["hours"]
                log_business_rule("Shift Completed", f"{self.name}: +{shift['hours']} hours")
                break

    def add_training_requirement(self, training_name: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"""
        if not hasattr(self, '_training_requirements'):
            self._training_requirements = []
        if training_name not in self._training_requirements:
            self._training_requirements.append(training_name)
            log_business_rule("Training Required", f"{self.name}: {training_name}")

    def get_monthly_hours(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —á–∞—Å—ã –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
        current_month = datetime.now().month
        monthly_hours = 0
        for shift in self._shift_schedule:
            if shift["date"].month == current_month and shift["completed"]:
                monthly_hours += shift["hours"]
        return monthly_hours

    def update_performance_rating(self, new_rating: float):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not 1.0 <= new_rating <= 5.0:
            raise ValueError("Performance rating must be between 1.0 and 5.0")
        old_rating = self._performance_rating
        self._performance_rating = new_rating
        log_business_rule("Performance Update", f"{self.name}: {old_rating:.1f} ‚Üí {new_rating:.1f}")

    def __str__(self) -> str:
        return f"{self.name} - {self.role.value} (${self.hourly_rate:.2f}/hr)"

    def __repr__(self) -> str:
        return f"Staff(name='{self.name}', role={self.role.value}, id='{self.employee_id}')"


# ‚úÖ WYMAGANIE: Dziedziczenie - –ö–∞—Å—Å–∏—Ä –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Staff
class Cashier(Staff):
    """
    üìã CHECK: Dziedziczenie - Cashier –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Staff
    ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–ª–∞—Å—Å–∞
    ‚úÖ WYMAGANIE: super() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
    base_salary = 16.50  # –í—ã—à–µ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏
    department = "front_counter"
    required_access_level = AccessLevel.BASIC
    default_shift_hours = 8

    def __init__(self, name: str, employee_id: str, hire_date: datetime = None,
                 register_number: int = 1, languages: List[str] = None):
        # ‚úÖ WYMAGANIE: super() - –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        super().__init__(name, employee_id, StaffRole.CASHIER, hire_date)

        # üîÑ TRANSFER: Staff.__init__ ‚Üí Cashier.__init__ (cashier specific data)
        log_transfer("Staff.__init__", "Cashier.__init__", "cashier-specific attributes")

        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞ –∞—Ç—Ä–∏–±—É—Ç—ã
        self.register_number = register_number
        self.languages = languages or ["English"]
        self._transactions_processed = 0
        self._daily_sales = 0.0
        self._customer_satisfaction = 4.0  # 1-5 scale

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞
        self._hourly_rate = self.base_salary

        # üìã CHECK: Dziedziczenie - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        log_requirement_check("Inheritance", "SUCCESS", f"Cashier extends Staff: {name}")

    # ‚úÖ WYMAGANIE: Nadpisywanie met–æ–¥ - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ work()
    def work(self) -> str:
        """
        üìã CHECK: Nadpisywanie met–æ–¥ - –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ work() –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞
        """
        # ‚úÖ WYMAGANIE: super() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è + –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
        base_work = super().work()
        return f"{base_work} - serving customers at register #{self.register_number}"

    def get_permissions(self) -> List[str]:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞"""
        return [
            "process_orders",
            "handle_payments",
            "issue_refunds",
            "view_menu",
            "print_receipts",
            "handle_coupons"
        ]

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–∞—Å—Å–∏—Ä–∞
    def process_transaction(self, amount: float):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
        self._transactions_processed += 1
        self._daily_sales += amount
        log_business_rule("Transaction Processed",
                          f"Cashier {self.name}: ${amount:.2f} (Total: {self._transactions_processed})")

    def switch_register(self, new_register: int):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –Ω–∞ –¥—Ä—É–≥—É—é –∫–∞—Å—Å—É"""
        old_register = self.register_number
        self.register_number = new_register
        log_business_rule("Register Switch", f"{self.name}: Register #{old_register} ‚Üí #{new_register}")

    def get_daily_performance(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–∞–±–æ—Ç—ã –∑–∞ –¥–µ–Ω—å"""
        return {
            "transactions": self._transactions_processed,
            "sales": self._daily_sales,
            "avg_transaction": self._daily_sales / max(self._transactions_processed, 1),
            "satisfaction": self._customer_satisfaction
        }


# ‚úÖ WYMAGANIE: Dziedziczenie - –ö—É—Ö–æ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª
class KitchenStaff(Staff):
    """
    üìã CHECK: Dziedziczenie - KitchenStaff –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Staff
    –ö—É—Ö–æ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª McDonald's
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w
    base_salary = 17.00  # –í—ã—à–µ –∏–∑-–∑–∞ –Ω–∞–≤—ã–∫–æ–≤
    department = "kitchen"
    required_access_level = AccessLevel.INTERMEDIATE
    default_shift_hours = 8

    def __init__(self, name: str, employee_id: str, station: str = "grill",
                 certifications: List[str] = None, hire_date: datetime = None):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(name, employee_id, StaffRole.KITCHEN_STAFF, hire_date)

        # üîÑ TRANSFER: Staff.__init__ ‚Üí KitchenStaff.__init__
        log_transfer("Staff.__init__", "KitchenStaff.__init__", "kitchen-specific attributes")

        self.station = station  # grill, fryer, assembly, prep
        self.certifications = certifications or ["Food Safety"]
        self._orders_completed = 0
        self._avg_prep_time = 5.0  # minutes
        self._food_waste_score = 95.0  # percentage (higher is better)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É
        self._hourly_rate = self.base_salary

        log_requirement_check("Inheritance", "SUCCESS", f"KitchenStaff extends Staff: {name}")

    # ‚úÖ WYMAGANIE: Nadpisywanie met–æ–¥
    def work(self) -> str:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã –¥–ª—è –∫—É—Ö–Ω–∏"""
        base_work = super().work()
        return f"{base_work} - cooking at {self.station} station"

    def get_permissions(self) -> List[str]:
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞"""
        base_permissions = [
            "access_kitchen",
            "view_orders",
            "mark_orders_complete",
            "access_inventory",
            "use_equipment"
        ]

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–Ω—Ü–∏–∏
        if self.station == "grill":
            base_permissions.extend(["operate_grill", "cook_meat"])
        elif self.station == "fryer":
            base_permissions.extend(["operate_fryer", "cook_fries"])
        elif self.station == "assembly":
            base_permissions.extend(["assemble_burgers", "package_orders"])

        return base_permissions

    def complete_order(self, order_id: str, prep_time: float):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        self._orders_completed += 1

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        self._avg_prep_time = ((self._avg_prep_time * (
                    self._orders_completed - 1)) + prep_time) / self._orders_completed

        log_business_rule("Order Completed",
                          f"Kitchen {self.name}: Order {order_id} in {prep_time:.1f}min")

    def change_station(self, new_station: str):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–∞–Ω—Ü–∏—é"""
        valid_stations = ["grill", "fryer", "assembly", "prep", "drive_thru"]
        if new_station not in valid_stations:
            raise ValueError(f"Invalid station: {new_station}")

        old_station = self.station
        self.station = new_station
        log_business_rule("Station Change", f"{self.name}: {old_station} ‚Üí {new_station}")

    def add_certification(self, certification: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"""
        if certification not in self.certifications:
            self.certifications.append(certification)
            # –ë–æ–Ω—É—Å –∫ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if len(self.certifications) > 2:
                self._hourly_rate += 0.25
            log_business_rule("Certification Added", f"{self.name}: +{certification}")


# ‚úÖ WYMAGANIE: Dziedziczenie - –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–º–µ–Ω—ã
class ShiftManager(Staff):
    """
    üìã CHECK: Dziedziczenie - ShiftManager –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç Staff
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–º–µ–Ω—ã McDonald's —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª–Ω–æ–º–æ—á–∏—è–º–∏
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w
    base_salary = 22.00  # –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –≤—ã—à–µ
    department = "management"
    required_access_level = AccessLevel.MANAGEMENT
    default_shift_hours = 10  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–º–µ–Ω—ã

    def __init__(self, name: str, employee_id: str, managed_shifts: List[ShiftType] = None,
                 team_size: int = 15, hire_date: datetime = None):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(name, employee_id, StaffRole.SHIFT_MANAGER, hire_date)

        # üîÑ TRANSFER: Staff.__init__ ‚Üí ShiftManager.__init__
        log_transfer("Staff.__init__", "ShiftManager.__init__", "manager-specific attributes")

        self.managed_shifts = managed_shifts or [ShiftType.MORNING]
        self.team_size = team_size
        self._managed_employees: List[str] = []  # Employee IDs
        self._shift_performance = {}
        self._can_authorize_refunds = True
        self._can_modify_schedules = True

        # –ú–µ–Ω–µ–¥–∂–µ—Ä—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞
        self._hourly_rate = self.base_salary
        self._access_level = AccessLevel.MANAGEMENT

        log_requirement_check("Inheritance", "SUCCESS", f"ShiftManager extends Staff: {name}")

    # ‚úÖ WYMAGANIE: Nadpisywanie –º–µ—Ç–æ–¥
    def work(self) -> str:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        base_work = super().work()
        shifts = ", ".join([shift.value for shift in self.managed_shifts])
        return f"{base_work} - managing {shifts} shifts with {self.team_size} team members"

    def get_permissions(self) -> List[str]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        return [
            "manage_staff",
            "authorize_refunds",
            "modify_schedules",
            "access_reports",
            "handle_complaints",
            "authorize_discounts",
            "manage_inventory",
            "open_close_restaurant",
            "handle_emergencies",
            "train_employees"
        ]

    # ‚úÖ WYMAGANIE: Klasa zawierajƒÖca wiƒôcej ni≈º jeden konstruktor - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ã
    @classmethod
    def create_night_manager(cls, name: str, employee_id: str):
        """
        üìã CHECK: Wiele konstruktor√≥w - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        –°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã —Å –æ—Å–æ–±—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        """
        # üîÑ TRANSFER: ShiftManager.create_night_manager ‚Üí ShiftManager.__init__
        log_transfer("ShiftManager.create_night_manager", "ShiftManager.__init__", "night manager data")

        manager = cls(name, employee_id, [ShiftType.NIGHT], team_size=8)
        manager._hourly_rate += 2.00  # –ù–æ—á–Ω–∞—è –¥–æ–ø–ª–∞—Ç–∞
        manager.add_training_requirement("Night Operations")
        manager.add_training_requirement("Security Procedures")

        log_requirement_check("Multiple Constructors", "EXECUTED", "ShiftManager.create_night_manager()")
        return manager

    @classmethod
    def create_breakfast_manager(cls, name: str, employee_id: str):
        """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Ç—Ä–µ–Ω–Ω–µ–π/–∑–∞–≤—Ç—Ä–∞–∫ —Å–º–µ–Ω—ã"""
        manager = cls(name, employee_id, [ShiftType.BREAKFAST, ShiftType.MORNING], team_size=12)
        manager.add_training_requirement("Breakfast Menu")
        manager.add_training_requirement("Morning Rush Management")
        return manager

    @classmethod
    def promote_from_cashier(cls, cashier: Cashier):
        """–ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç –∫–∞—Å—Å–∏—Ä–∞ –¥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–º–µ–Ω—ã"""
        if cashier._performance_rating < 4.0:
            raise ValueError("Cashier must have performance rating of 4.0+ for promotion")

        manager = cls(cashier.name, cashier.employee_id, team_size=10)
        manager._total_hours_worked = cashier._total_hours_worked
        manager._performance_rating = cashier._performance_rating

        log_business_rule("Promotion", f"{cashier.name}: Cashier ‚Üí Shift Manager")
        return manager

    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    def add_team_member(self, employee_id: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –∫–æ–º–∞–Ω–¥—É"""
        if employee_id not in self._managed_employees:
            self._managed_employees.append(employee_id)
            log_business_rule("Team Addition", f"Manager {self.name}: +{employee_id}")

    def authorize_refund(self, amount: float, reason: str) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤"""
        if not self._can_authorize_refunds:
            raise UnauthorizedAccessException(self.employee_id, "authorize_refund", "MANAGEMENT")

        # –õ–∏–º–∏—Ç—ã –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç
        max_refund = 50.00 if amount <= 50.00 else None
        if max_refund and amount > max_refund:
            log_business_rule("Refund Denied", f"Amount ${amount:.2f} exceeds limit ${max_refund:.2f}")
            return False

        log_business_rule("Refund Authorized", f"Manager {self.name}: ${amount:.2f} - {reason}")
        return True

    def evaluate_shift_performance(self, shift_date: datetime, metrics: Dict[str, float]):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–º–µ–Ω—ã"""
        self._shift_performance[shift_date.strftime("%Y-%m-%d")] = metrics

        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞
        avg_score = sum(metrics.values()) / len(metrics)
        log_business_rule("Shift Evaluation",
                          f"Manager {self.name}: {shift_date.strftime('%Y-%m-%d')} scored {avg_score:.1f}")


# ‚úÖ WYMAGANIE: Dziedziczenie - –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
class GeneralManager(ShiftManager):
    """
    üìã CHECK: Dziedziczenie - GeneralManager –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç ShiftManager (–º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ)
    –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä McDonald's —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª–Ω–æ–º–æ—á–∏—è–º–∏
    """

    # ‚úÖ WYMAGANIE: Nadpisywanie atrybut√≥w
    base_salary = 28.00  # –°–∞–º–∞—è –≤—ã—Å–æ–∫–∞—è —Å—Ç–∞–≤–∫–∞
    department = "executive_management"
    required_access_level = AccessLevel.EXECUTIVE
    default_shift_hours = 12  # –°–∞–º—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å–º–µ–Ω—ã

    def __init__(self, name: str, employee_id: str, region: str = "Metro",
                 restaurants_managed: int = 1, hire_date: datetime = None):
        # ‚úÖ WYMAGANIE: super() - –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        super().__init__(name, employee_id, list(ShiftType), team_size=50, hire_date=hire_date)

        # üîÑ TRANSFER: ShiftManager.__init__ ‚Üí GeneralManager.__init__
        log_transfer("ShiftManager.__init__", "GeneralManager.__init__", "GM-specific attributes")

        self.region = region
        self.restaurants_managed = restaurants_managed
        self._budget_authority = 10000.00  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ä–µ—à–µ–Ω–∏–π
        self._can_hire_fire = True
        self._quarterly_targets = {}

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –∏ –¥–æ—Å—Ç—É–ø
        self.role = StaffRole.GENERAL_MANAGER
        self._hourly_rate = self.base_salary
        self._access_level = AccessLevel.EXECUTIVE

        log_requirement_check("Inheritance", "SUCCESS", f"GeneralManager extends ShiftManager: {name}")

    # ‚úÖ WYMAGANIE: Nadpisywanie –º–µ—Ç–æ–¥
    def work(self) -> str:
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # ‚úÖ WYMAGANIE: super() - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è
        base_work = super().work()
        return f"{base_work} - overseeing {self.restaurants_managed} restaurant(s) in {self.region} region"

    def get_permissions(self) -> List[str]:
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–º–µ–Ω—ã
        base_permissions = super().get_permissions()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è GM
        gm_permissions = [
            "hire_employees",
            "terminate_employees",
            "set_salaries",
            "approve_budgets",
            "access_financials",
            "modify_menu_prices",
            "authorize_large_refunds",
            "manage_suppliers",
            "plan_promotions",
            "access_corporate_data"
        ]

        return base_permissions + gm_permissions

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è GM
    def hire_employee(self, staff: Staff) -> bool:
        """–ù–∞–Ω–∏–º–∞–µ—Ç –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        if not self._can_hire_fire:
            raise UnauthorizedAccessException(self.employee_id, "hire_employee", "EXECUTIVE")

        log_business_rule("Employee Hired", f"GM {self.name}: hired {staff.name} as {staff.role.value}")
        return True

    def set_quarterly_target(self, metric: str, target: float):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—ã–µ —Ü–µ–ª–∏"""
        self._quarterly_targets[metric] = target
        log_business_rule("Quarterly Target", f"GM {self.name}: {metric} = {target}")

    def approve_budget(self, amount: float, category: str) -> bool:
        """–£—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—é–¥–∂–µ—Ç"""
        if amount > self._budget_authority:
            log_business_rule("Budget Denied", f"Amount ${amount:.2f} exceeds authority ${self._budget_authority:.2f}")
            return False

        log_business_rule("Budget Approved", f"GM {self.name}: ${amount:.2f} for {category}")
        return True


# –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
def demo_staff_system():
    """
    üìã CHECK: –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ McDonald's
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª–∞—Å—Å–æ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    """

    print("üë• McDONALD'S STAFF SYSTEM DEMO")
    print("=" * 50)

    # üîÑ TRANSFER: demo ‚Üí staff classes (—Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤)
    log_transfer("demo_staff_system", "Staff classes", "employee creation")

    # 1. ‚úÖ WYMAGANIE: @classmethod - Factory methods
    print("\n1. FACTORY METHODS (@classmethod)")
    print("-" * 30)

    new_cashier = Staff.create_new_hire("Alice Johnson", "EMP1001", StaffRole.CASHIER)
    transfer_cook = Staff.create_transfer_employee("Carlos Rodriguez", "EMP1002",
                                                   StaffRole.KITCHEN_STAFF, "Downtown Location", 3)

    print(f"New hire: {new_cashier}")
    print(f"Transfer: {transfer_cook}")

    # 2. ‚úÖ WYMAGANIE: Dziedziczenie + Nadpisywanie
    print("\n2. INHERITANCE & METHOD OVERRIDING")
    print("-" * 30)

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    cashier = Cashier("Emma Davis", "EMP1003", register_number=2, languages=["English", "Spanish"])
    kitchen_staff = KitchenStaff("Mike Wilson", "EMP1004", station="grill",
                                 certifications=["Food Safety", "Grill Master"])
    night_manager = ShiftManager.create_night_manager("Sarah Kim", "EMP1005")
    gm = GeneralManager("Robert Chen", "EMP1006", region="North Metro", restaurants_managed=3)

    staff_members = [cashier, kitchen_staff, night_manager, gm]

    for staff in staff_members:
        print(f"üë§ {staff.work()}")
        print(f"   Salary: ${staff.hourly_rate:.2f}/hour")
        print(f"   Access Level: {staff.access_level.name}")
        print(f"   Permissions: {len(staff.get_permissions())} total")

    # 3. ‚úÖ WYMAGANIE: @staticmethod
    print("\n3. STATIC METHODS (@staticmethod)")
    print("-" * 30)

    weekly_salary = Staff.calculate_weekly_salary(16.50, 40, 5)  # 40 regular + 5 overtime
    print(f"Weekly salary example: ${weekly_salary:.2f}")

    print(f"Valid ID 'EMP1234': {Staff.is_valid_employee_id('EMP1234')}")
    print(f"Invalid ID 'ABC123': {Staff.is_valid_employee_id('ABC123')}")

    morning_times = Staff.get_shift_times(ShiftType.MORNING)
    print(f"Morning shift: {morning_times[0]} - {morning_times[1]}")

    # 4. ‚úÖ WYMAGANIE: Enkapsulacja - Property usage
    print("\n4. ENCAPSULATION (Property)")
    print("-" * 30)

    print(f"Cashier original rate: ${cashier.hourly_rate:.2f}")
    cashier.hourly_rate = 17.50  # –ò—Å–ø–æ–ª—å–∑—É–µ–º setter
    print(f"Cashier new rate: ${cashier.hourly_rate:.2f}")

    cashier.access_level = AccessLevel.INTERMEDIATE  # –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
    print(f"Cashier access level: {cashier.access_level.name}")

    # 5. ‚úÖ WYMAGANIE: Polimorfizm - –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã
    print("\n5. POLYMORPHISM")
    print("-" * 30)

    def show_employee_info(employee: Staff):
        """–ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–æ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"""
        print(f"Employee: {employee.name}")
        print(f"Work description: {employee.work()}")
        print(f"Permissions count: {len(employee.get_permissions())}")
        print()

    print("Polymorphic function working with different employee types:")
    for staff in [cashier, kitchen_staff, night_manager, gm]:
        show_employee_info(staff)

    # 6. –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
    print("\n6. STAFF OPERATIONS")
    print("-" * 30)

    # –ö–∞—Å—Å–∏—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    cashier.process_transaction(25.99)
    cashier.process_transaction(18.50)

    # –ö—É—Ö–æ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑—ã
    kitchen_staff.complete_order("ORD123", 4.5)
    kitchen_staff.add_certification("Advanced Grill")

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç
    refund_approved = night_manager.authorize_refund(15.00, "Wrong order")
    print(f"Refund authorized: {refund_approved}")

    # GM —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—é–¥–∂–µ—Ç
    budget_approved = gm.approve_budget(5000.00, "Equipment upgrade")
    print(f"Budget approved: {budget_approved}")

    # 7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n7. STAFF STATISTICS")
    print("-" * 30)
    print(f"Total employees: {Staff.get_total_employees()}")
    print(f"Employees by role: {Staff.get_employees_by_role()}")

    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞—Å—Å–∏—Ä–∞
    performance = cashier.get_daily_performance()
    print(f"Cashier performance: {performance}")

    # üìã CHECK: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    log_requirement_check("Staff System Demo", "COMPLETED", "staff.py")

    return staff_members


if __name__ == "__main__":
    demo_staff_system()