"""
McDonald's Management System - Observer Pattern
‚úÖ WYMAGANIE: Wzorzec Observer - powiadomienia o zam√≥wieniach
‚úÖ WYMAGANIE: Polimorfizm poprzez r√≥≈ºnych obserwator√≥w

–ü–∞—Ç—Ç–µ—Ä–Ω Observer –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π McDonald's
"""

from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Set
from enum import Enum
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils.logger import log_transfer, log_requirement_check, log_operation, log_business_rule


class NotificationType(Enum):
    ORDER_CREATED = "order_created"
    ORDER_CONFIRMED = "order_confirmed"
    ORDER_IN_PREPARATION = "order_in_preparation"
    ORDER_READY = "order_ready"
    ORDER_COMPLETED = "order_completed"
    ORDER_CANCELLED = "order_cancelled"
    PAYMENT_PROCESSED = "payment_processed"
    PAYMENT_FAILED = "payment_failed"
    KITCHEN_ALERT = "kitchen_alert"
    DRIVE_THRU_ALERT = "drive_thru_alert"
    CUSTOMER_ARRIVAL = "customer_arrival"
    STAFF_ALERT = "staff_alert"


class NotificationPriority(Enum):
    LOW = "low"
    NORMAL = "normal"
    HIGH = "high"
    URGENT = "urgent"
    CRITICAL = "critical"


class NotificationChannel(Enum):
    MOBILE_APP = "mobile_app"
    SMS = "sms"
    EMAIL = "email"
    KITCHEN_DISPLAY = "kitchen_display"
    POS_SYSTEM = "pos_system"
    DRIVE_THRU_SPEAKER = "drive_thru_speaker"
    STAFF_PAGER = "staff_pager"
    DIGITAL_BOARD = "digital_board"


# ‚úÖ WYMAGANIE: Wzorzec Observer - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Subject (–Ω–∞–±–ª—é–¥–∞–µ–º—ã–π –æ–±—ä–µ–∫—Ç)
class OrderNotificationSubject(ABC):
    """
    üìã CHECK: Observer Pattern - Subject interface
    ‚úÖ WYMAGANIE: Wzorzec Observer - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞–±–ª—é–¥–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    """

    def __init__(self):
        self._observers: Set['OrderObserver'] = set()
        self._notification_history: List[Dict[str, Any]] = []

        # üìã CHECK: Observer Pattern - Subject —Å–æ–∑–¥–∞–Ω
        log_requirement_check("Observer Pattern Subject", "CREATED", self.__class__.__name__)

    @abstractmethod
    def attach(self, observer: 'OrderObserver'):
        """
        üìã CHECK: Observer Pattern - Attach method
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        """
        pass

    @abstractmethod
    def detach(self, observer: 'OrderObserver'):
        """
        üìã CHECK: Observer Pattern - Detach method
        –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        pass

    @abstractmethod
    def notify(self, notification_type: NotificationType, data: Dict[str, Any]):
        """
        üìã CHECK: Observer Pattern - Notify method
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –æ —Å–æ–±—ã—Ç–∏–∏
        """
        pass


# ‚úÖ WYMAGANIE: Wzorzec Observer - –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Observer (–Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å)
class OrderObserver(ABC):
    """
    üìã CHECK: Observer Pattern - Observer interface
    ‚úÖ WYMAGANIE: Wzorzec Observer - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    """

    def __init__(self, observer_id: str, name: str):
        self.observer_id = observer_id
        self.name = name
        self._is_active = True
        self._notification_count = 0
        self._last_notification_time: Optional[datetime] = None

        # üìã CHECK: Observer Pattern - Observer —Å–æ–∑–¥–∞–Ω
        log_requirement_check("Observer Pattern Observer", "CREATED", f"{name} ({observer_id})")

    @abstractmethod
    def update(self, subject: OrderNotificationSubject, notification_type: NotificationType,
               data: Dict[str, Any]):
        """
        üìã CHECK: Observer Pattern - Update method
        ‚úÖ WYMAGANIE: Wzorzec Observer - –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        pass

    @abstractmethod
    def get_notification_channels(self) -> List[NotificationChannel]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        pass

    def is_interested_in(self, notification_type: NotificationType, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –ª–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω–æ–º —Ç–∏–ø–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        return True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤–æ –≤—Å–µ—Ö

    def set_active(self, active: bool):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        self._is_active = active
        status = "ACTIVE" if active else "INACTIVE"
        log_business_rule("Observer Status", f"{self.name}: {status}")

    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è"""
        return {
            "observer_id": self.observer_id,
            "name": self.name,
            "is_active": self._is_active,
            "notification_count": self._notification_count,
            "last_notification": self._last_notification_time.isoformat() if self._last_notification_time else None
        }


# ‚úÖ WYMAGANIE: Wzorzec Observer - –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Subject
class OrderTracker(OrderNotificationSubject):
    """
    üìã CHECK: Observer Pattern - Concrete Subject
    –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è Subject –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
    """

    def __init__(self, restaurant_id: str):
        super().__init__()

        # üîÑ TRANSFER: OrderNotificationSubject.__init__ ‚Üí OrderTracker.__init__
        log_transfer("OrderNotificationSubject.__init__", "OrderTracker.__init__",
                     "order tracking attributes")

        self.restaurant_id = restaurant_id
        self._active_orders: Dict[str, Dict[str, Any]] = {}
        self._notification_queue: List[Dict[str, Any]] = []
        self._auto_notify_enabled = True

        log_requirement_check("Observer Inheritance", "SUCCESS",
                              f"OrderTracker extends OrderNotificationSubject")

    def attach(self, observer: OrderObserver):
        """
        üìã CHECK: Observer Pattern - Attach implementation
        –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
        """
        self._observers.add(observer)
        log_business_rule("Observer Attached",
                          f"{observer.name} subscribed to {self.restaurant_id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–ø–∏—Å–∫–µ
        self._add_to_history("observer_attached", {
            "observer_id": observer.observer_id,
            "observer_name": observer.name,
            "channels": [ch.value for ch in observer.get_notification_channels()]
        })

    def detach(self, observer: OrderObserver):
        """
        üìã CHECK: Observer Pattern - Detach implementation
        –û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
        """
        self._observers.discard(observer)
        log_business_rule("Observer Detached",
                          f"{observer.name} unsubscribed from {self.restaurant_id}")

        self._add_to_history("observer_detached", {
            "observer_id": observer.observer_id,
            "observer_name": observer.name
        })

    def notify(self, notification_type: NotificationType, data: Dict[str, Any]):
        """
        üìã CHECK: Observer Pattern - Notify implementation
        –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        """
        # üîÑ TRANSFER: OrderTracker ‚Üí observers (notification broadcast)
        log_transfer("OrderTracker", "OrderObserver instances", f"notification: {notification_type.value}")

        if not self._auto_notify_enabled:
            self._queue_notification(notification_type, data)
            return

        notification_data = {
            "type": notification_type,
            "data": data,
            "timestamp": datetime.now(),
            "restaurant_id": self.restaurant_id,
            "notification_id": f"NOT{len(self._notification_history) + 1:06d}"
        }

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        notified_count = 0
        for observer in self._observers:
            if observer._is_active and observer.is_interested_in(notification_type, data):
                try:
                    observer.update(self, notification_type, notification_data)
                    observer._notification_count += 1
                    observer._last_notification_time = datetime.now()
                    notified_count += 1
                except Exception as e:
                    log_business_rule("Notification Failed",
                                      f"Failed to notify {observer.name}: {str(e)}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self._add_to_history(notification_type.value, {
            **data,
            "notified_observers": notified_count,
            "total_observers": len(self._observers)
        })

        log_business_rule("Notification Sent",
                          f"{notification_type.value}: notified {notified_count}/{len(self._observers)} observers")

        log_requirement_check("Observer Pattern", "EXECUTED", f"Notification: {notification_type.value}")

    def _queue_notification(self, notification_type: NotificationType, data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        self._notification_queue.append({
            "type": notification_type,
            "data": data,
            "queued_at": datetime.now()
        })
        log_business_rule("Notification Queued", f"{notification_type.value} queued")

    def process_notification_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self._notification_queue:
            notification = self._notification_queue.pop(0)
            self.notify(notification["type"], notification["data"])

    def _add_to_history(self, event_type: str, data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        self._notification_history.append({
            "timestamp": datetime.now(),
            "event_type": event_type,
            "data": data
        })

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
    def track_order(self, order_id: str, order_data: Dict[str, Any]):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        self._active_orders[order_id] = {
            **order_data,
            "tracked_since": datetime.now(),
            "status_changes": []
        }

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
        self.notify(NotificationType.ORDER_CREATED, {
            "order_id": order_id,
            "customer_id": order_data.get("customer_id"),
            "order_type": order_data.get("order_type"),
            "total_amount": order_data.get("total_amount"),
            "items_count": order_data.get("items_count", 0)
        })

    def update_order_status(self, order_id: str, new_status: str, additional_data: Dict[str, Any] = None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π"""
        if order_id not in self._active_orders:
            log_business_rule("Order Update Failed", f"Order {order_id} not being tracked")
            return

        old_status = self._active_orders[order_id].get("status", "unknown")
        self._active_orders[order_id]["status"] = new_status
        self._active_orders[order_id]["status_changes"].append({
            "from": old_status,
            "to": new_status,
            "timestamp": datetime.now(),
            "data": additional_data or {}
        })

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞
        notification_type_mapping = {
            "confirmed": NotificationType.ORDER_CONFIRMED,
            "in_preparation": NotificationType.ORDER_IN_PREPARATION,
            "ready": NotificationType.ORDER_READY,
            "completed": NotificationType.ORDER_COMPLETED,
            "cancelled": NotificationType.ORDER_CANCELLED
        }

        notification_type = notification_type_mapping.get(new_status.lower(), NotificationType.ORDER_CONFIRMED)

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notification_data = {
            "order_id": order_id,
            "old_status": old_status,
            "new_status": new_status,
            "customer_id": self._active_orders[order_id].get("customer_id"),
            "order_type": self._active_orders[order_id].get("order_type"),
            **(additional_data or {})
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notify(notification_type, notification_data)

    def complete_order_tracking(self, order_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
        if order_id in self._active_orders:
            completed_order = self._active_orders.pop(order_id)
            log_business_rule("Order Tracking Completed", f"Stopped tracking {order_id}")

    def get_tracking_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"""
        return {
            "restaurant_id": self.restaurant_id,
            "active_orders": len(self._active_orders),
            "total_observers": len(self._observers),
            "active_observers": sum(1 for obs in self._observers if obs._is_active),
            "notifications_sent": len(self._notification_history),
            "queued_notifications": len(self._notification_queue)
        }


# ‚úÖ WYMAGANIE: Dziedziczenie + Observer - –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–Ω–∏
class KitchenDisplayObserver(OrderObserver):
    """
    üìã CHECK: Observer Pattern - Kitchen display observer
    üìã CHECK: Dziedziczenie - KitchenDisplayObserver –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç OrderObserver
    –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è
    """

    def __init__(self, observer_id: str, station: str = "main_kitchen"):
        # ‚úÖ WYMAGANIE: super() - –≤—ã–∑–æ–≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
        super().__init__(observer_id, f"Kitchen Display ({station})")

        # üîÑ TRANSFER: OrderObserver.__init__ ‚Üí KitchenDisplayObserver.__init__
        log_transfer("OrderObserver.__init__", "KitchenDisplayObserver.__init__",
                     "kitchen display attributes")

        self.station = station
        self._priority_orders: List[str] = []
        self._preparation_queue: List[Dict[str, Any]] = []
        self._display_capacity = 12  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω–µ

        log_requirement_check("Observer Inheritance", "SUCCESS",
                              f"KitchenDisplayObserver extends OrderObserver")

    def update(self, subject: OrderNotificationSubject, notification_type: NotificationType,
               data: Dict[str, Any]):
        """
        üìã CHECK: Observer Pattern - Kitchen display update implementation
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è
        """
        order_id = data["data"].get("order_id")
        notification_data = data["data"]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification_type == NotificationType.ORDER_CONFIRMED:
            self._add_to_preparation_queue(order_id, notification_data)

        elif notification_type == NotificationType.ORDER_IN_PREPARATION:
            self._update_preparation_status(order_id, "preparing")

        elif notification_type == NotificationType.ORDER_READY:
            self._mark_order_ready(order_id)

        elif notification_type == NotificationType.ORDER_COMPLETED:
            self._remove_from_display(order_id)

        elif notification_type == NotificationType.KITCHEN_ALERT:
            self._handle_kitchen_alert(notification_data)

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        log_business_rule("Kitchen Display Updated",
                          f"Station {self.station}: {notification_type.value} for order {order_id}")

    def get_notification_channels(self) -> List[NotificationChannel]:
        """–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫—É—Ö–æ–Ω–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—è"""
        return [NotificationChannel.KITCHEN_DISPLAY, NotificationChannel.STAFF_PAGER]

    def is_interested_in(self, notification_type: NotificationType, data: Dict[str, Any]) -> bool:
        """–ö—É—Ö–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω–∞ –≤ –∑–∞–∫–∞–∑–∞—Ö –∏ –∫—É—Ö–æ–Ω–Ω—ã—Ö –∞–ª–µ—Ä—Ç–∞—Ö"""
        kitchen_notifications = {
            NotificationType.ORDER_CONFIRMED,
            NotificationType.ORDER_IN_PREPARATION,
            NotificationType.ORDER_READY,
            NotificationType.ORDER_COMPLETED,
            NotificationType.KITCHEN_ALERT
        }
        return notification_type in kitchen_notifications

    def _add_to_preparation_queue(self, order_id: str, order_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (VIP, –±–æ–ª—å—à–∏–µ –∑–∞–∫–∞–∑—ã)
        is_priority = (
                order_data.get("customer_type") == "vip" or
                order_data.get("items_count", 0) > 5 or
                order_data.get("order_type") == "delivery"
        )

        queue_item = {
            "order_id": order_id,
            "customer_id": order_data.get("customer_id"),
            "order_type": order_data.get("order_type"),
            "items_count": order_data.get("items_count", 0),
            "estimated_prep_time": order_data.get("estimated_prep_time", 5),
            "is_priority": is_priority,
            "added_at": datetime.now(),
            "status": "queued"
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—É—é –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –æ–±—ã—á–Ω—É—é
        if is_priority:
            self._priority_orders.append(order_id)
            self._preparation_queue.insert(0, queue_item)  # –í –Ω–∞—á–∞–ª–æ
        else:
            self._preparation_queue.append(queue_item)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∏—Å–ø–ª–µ—è
        if len(self._preparation_queue) > self._display_capacity:
            self._preparation_queue = self._preparation_queue[:self._display_capacity]

        log_business_rule("Order Queued",
                          f"Kitchen {self.station}: Order {order_id} {'(PRIORITY)' if is_priority else ''}")

    def _update_preparation_status(self, order_id: str, status: str):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        for item in self._preparation_queue:
            if item["order_id"] == order_id:
                item["status"] = status
                item["status_updated_at"] = datetime.now()
                break

    def _mark_order_ready(self, order_id: str):
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤—ã–º"""
        self._update_preparation_status(order_id, "ready")

        # –£–±–∏—Ä–∞–µ–º –∏–∑ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
        if order_id in self._priority_orders:
            self._priority_orders.remove(order_id)

    def _remove_from_display(self, order_id: str):
        """–£–±–∏—Ä–∞–µ—Ç –∑–∞–∫–∞–∑ —Å –¥–∏—Å–ø–ª–µ—è"""
        self._preparation_queue = [item for item in self._preparation_queue
                                   if item["order_id"] != order_id]

        if order_id in self._priority_orders:
            self._priority_orders.remove(order_id)

    def _handle_kitchen_alert(self, alert_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫—É—Ö–æ–Ω–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"""
        alert_type = alert_data.get("alert_type")
        message = alert_data.get("message", "Kitchen alert")

        log_business_rule("Kitchen Alert", f"Station {self.station}: {alert_type} - {message}")

    def get_current_queue(self) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        return self._preparation_queue.copy()


# ‚úÖ WYMAGANIE: Dziedziczenie + Observer - –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
class CustomerMobileObserver(OrderObserver):
    """
    üìã CHECK: Observer Pattern - Customer mobile app observer
    üìã CHECK: Dziedziczenie - CustomerMobileObserver –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç OrderObserver
    –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    """

    def __init__(self, observer_id: str, customer_id: str, phone_number: str = "",
                 push_notifications_enabled: bool = True):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(observer_id, f"Mobile App ({customer_id})")

        # üîÑ TRANSFER: OrderObserver.__init__ ‚Üí CustomerMobileObserver.__init__
        log_transfer("OrderObserver.__init__", "CustomerMobileObserver.__init__",
                     "mobile app attributes")

        self.customer_id = customer_id
        self.phone_number = phone_number
        self.push_notifications_enabled = push_notifications_enabled
        self._order_updates: List[Dict[str, Any]] = []
        self._loyalty_notifications: List[Dict[str, Any]] = []

        log_requirement_check("Observer Inheritance", "SUCCESS",
                              f"CustomerMobileObserver extends OrderObserver")

    def update(self, subject: OrderNotificationSubject, notification_type: NotificationType,
               data: Dict[str, Any]):
        """
        üìã CHECK: Observer Pattern - Mobile app update implementation
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        """
        notification_data = data["data"]
        order_id = notification_data.get("order_id")
        customer_id = notification_data.get("customer_id")

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        if customer_id and customer_id != self.customer_id:
            return

        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_notification = {
            "notification_id": data.get("notification_id"),
            "type": notification_type.value,
            "timestamp": data.get("timestamp"),
            "order_id": order_id,
            "title": self._get_notification_title(notification_type),
            "message": self._get_notification_message(notification_type, notification_data),
            "priority": self._get_notification_priority(notification_type),
            "read": False
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if notification_type in [NotificationType.ORDER_CREATED, NotificationType.ORDER_CONFIRMED,
                                 NotificationType.ORDER_IN_PREPARATION, NotificationType.ORDER_READY,
                                 NotificationType.ORDER_COMPLETED]:
            self._order_updates.append(app_notification)
        else:
            self._loyalty_notifications.append(app_notification)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.push_notifications_enabled:
            self._send_push_notification(app_notification)

        log_business_rule("Mobile App Notified",
                          f"Customer {self.customer_id}: {notification_type.value}")

    def get_notification_channels(self) -> List[NotificationChannel]:
        """–ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        channels = [NotificationChannel.MOBILE_APP]
        if self.phone_number:
            channels.append(NotificationChannel.SMS)
        return channels

    def is_interested_in(self, notification_type: NotificationType, data: Dict[str, Any]) -> bool:
        """–ö–ª–∏–µ–Ω—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –æ —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–∞—Ö"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        customer_id = data.get("customer_id")
        if customer_id and customer_id != self.customer_id:
            return False

        # –ò–Ω—Ç–µ—Ä–µ—Å—É–µ–º—Å—è –≤—Å–µ–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∑–∞–∫–∞–∑–∞—Ö
        return notification_type in [
            NotificationType.ORDER_CREATED,
            NotificationType.ORDER_CONFIRMED,
            NotificationType.ORDER_IN_PREPARATION,
            NotificationType.ORDER_READY,
            NotificationType.ORDER_COMPLETED,
            NotificationType.ORDER_CANCELLED,
            NotificationType.PAYMENT_PROCESSED,
            NotificationType.PAYMENT_FAILED
        ]

    def _get_notification_title(self, notification_type: NotificationType) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        titles = {
            NotificationType.ORDER_CREATED: "Order Placed",
            NotificationType.ORDER_CONFIRMED: "Order Confirmed",
            NotificationType.ORDER_IN_PREPARATION: "Order Being Prepared",
            NotificationType.ORDER_READY: "Order Ready!",
            NotificationType.ORDER_COMPLETED: "Order Complete",
            NotificationType.ORDER_CANCELLED: "Order Cancelled",
            NotificationType.PAYMENT_PROCESSED: "Payment Successful",
            NotificationType.PAYMENT_FAILED: "Payment Failed"
        }
        return titles.get(notification_type, "McDonald's Update")

    def _get_notification_message(self, notification_type: NotificationType,
                                  data: Dict[str, Any]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        order_id = data.get("order_id", "")

        messages = {
            NotificationType.ORDER_CREATED: f"Your order {order_id} has been placed successfully.",
            NotificationType.ORDER_CONFIRMED: f"Your order {order_id} has been confirmed and payment processed.",
            NotificationType.ORDER_IN_PREPARATION: f"Your order {order_id} is being prepared in our kitchen.",
            NotificationType.ORDER_READY: f"Your order {order_id} is ready for pickup!",
            NotificationType.ORDER_COMPLETED: f"Your order {order_id} has been completed. Thank you!",
            NotificationType.ORDER_CANCELLED: f"Your order {order_id} has been cancelled.",
            NotificationType.PAYMENT_PROCESSED: f"Payment for order {order_id} was successful.",
            NotificationType.PAYMENT_FAILED: f"Payment for order {order_id} failed. Please try again."
        }

        return messages.get(notification_type, f"Update for your order {order_id}")

    def _get_notification_priority(self, notification_type: NotificationType) -> NotificationPriority:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        high_priority = {
            NotificationType.ORDER_READY,
            NotificationType.ORDER_CANCELLED,
            NotificationType.PAYMENT_FAILED
        }

        if notification_type in high_priority:
            return NotificationPriority.HIGH
        else:
            return NotificationPriority.NORMAL

    def _send_push_notification(self, notification: Dict[str, Any]):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        log_business_rule("Push Notification Sent",
                          f"To {self.customer_id}: {notification['title']}")

    def get_recent_notifications(self, limit: int = 10) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        all_notifications = self._order_updates + self._loyalty_notifications
        all_notifications.sort(key=lambda x: x["timestamp"], reverse=True)
        return all_notifications[:limit]

    def mark_notification_as_read(self, notification_id: str):
        """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        for notification in self._order_updates + self._loyalty_notifications:
            if notification.get("notification_id") == notification_id:
                notification["read"] = True
                break


# ‚úÖ WYMAGANIE: Dziedziczenie + Observer - Drive-Thru —Å–∏—Å—Ç–µ–º–∞
class DriveThruObserver(OrderObserver):
    """
    üìã CHECK: Observer Pattern - Drive-thru observer
    üìã CHECK: Dziedziczenie - DriveThruObserver –Ω–∞—Å–ª–µ–¥—É–µ—Ç –æ—Ç OrderObserver
    –ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Drive-Thru
    """

    def __init__(self, observer_id: str, lane_number: int = 1):
        # ‚úÖ WYMAGANIE: super()
        super().__init__(observer_id, f"Drive-Thru Lane {lane_number}")

        # üîÑ TRANSFER: OrderObserver.__init__ ‚Üí DriveThruObserver.__init__
        log_transfer("OrderObserver.__init__", "DriveThruObserver.__init__",
                     "drive-thru attributes")

        self.lane_number = lane_number
        self._current_queue: List[Dict[str, Any]] = []
        self._max_queue_size = 10
        self._average_service_time = 180  # —Å–µ–∫—É–Ω–¥

        log_requirement_check("Observer Inheritance", "SUCCESS",
                              f"DriveThruObserver extends OrderObserver")

    def update(self, subject: OrderNotificationSubject, notification_type: NotificationType,
               data: Dict[str, Any]):
        """
        üìã CHECK: Observer Pattern - Drive-thru update implementation
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è Drive-Thru
        """
        notification_data = data["data"]
        order_id = notification_data.get("order_id")
        order_type = notification_data.get("order_type")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Drive-Thru –∑–∞–∫–∞–∑—ã
        if order_type != "drive_thru":
            return

        if notification_type == NotificationType.ORDER_CREATED:
            self._add_to_queue(order_id, notification_data)

        elif notification_type == NotificationType.ORDER_READY:
            self._notify_order_ready(order_id)

        elif notification_type == NotificationType.ORDER_COMPLETED:
            self._remove_from_queue(order_id)

        elif notification_type == NotificationType.DRIVE_THRU_ALERT:
            self._handle_drive_thru_alert(notification_data)

        log_business_rule("Drive-Thru Updated",
                          f"Lane {self.lane_number}: {notification_type.value} for order {order_id}")

    def get_notification_channels(self) -> List[NotificationChannel]:
        """–ö–∞–Ω–∞–ª—ã –¥–ª—è Drive-Thru"""
        return [NotificationChannel.DRIVE_THRU_SPEAKER, NotificationChannel.POS_SYSTEM]

    def is_interested_in(self, notification_type: NotificationType, data: Dict[str, Any]) -> bool:
        """Drive-Thru –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ Drive-Thru –∑–∞–∫–∞–∑–∞—Ö"""
        order_type = data.get("order_type")

        # –ò–Ω—Ç–µ—Ä–µ—Å—É–µ–º—Å—è —Ç–æ–ª—å–∫–æ Drive-Thru –∑–∞–∫–∞–∑–∞–º–∏ –∏ –∞–ª–µ—Ä—Ç–∞–º–∏
        drive_thru_notifications = {
            NotificationType.ORDER_CREATED,
            NotificationType.ORDER_READY,
            NotificationType.ORDER_COMPLETED,
            NotificationType.DRIVE_THRU_ALERT
        }

        return (notification_type in drive_thru_notifications and
                (order_type == "drive_thru" or notification_type == NotificationType.DRIVE_THRU_ALERT))

    def _add_to_queue(self, order_id: str, order_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å Drive-Thru"""
        if len(self._current_queue) >= self._max_queue_size:
            log_business_rule("Drive-Thru Queue Full", f"Lane {self.lane_number} at capacity")
            return

        queue_item = {
            "order_id": order_id,
            "customer_id": order_data.get("customer_id"),
            "items_count": order_data.get("items_count", 0),
            "estimated_wait": len(self._current_queue) * self._average_service_time,
            "added_at": datetime.now(),
            "position": len(self._current_queue) + 1
        }

        self._current_queue.append(queue_item)

        log_business_rule("Drive-Thru Queue Added",
                          f"Lane {self.lane_number}: Order {order_id} at position {queue_item['position']}")

    def _notify_order_ready(self, order_id: str):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞"""
        for item in self._current_queue:
            if item["order_id"] == order_id:
                item["ready_at"] = datetime.now()
                position = item["position"]
                log_business_rule("Drive-Thru Order Ready",
                                  f"Lane {self.lane_number}: Order {order_id} ready at position {position}")
                break

    def _remove_from_queue(self, order_id: str):
        """–£–±–∏—Ä–∞–µ—Ç –∑–∞–∫–∞–∑ –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        self._current_queue = [item for item in self._current_queue
                               if item["order_id"] != order_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
        for i, item in enumerate(self._current_queue):
            item["position"] = i + 1

        log_business_rule("Drive-Thru Queue Completed",
                          f"Lane {self.lane_number}: Order {order_id} completed, {len(self._current_queue)} remaining")

    def _handle_drive_thru_alert(self, alert_data: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–ª–µ—Ä—Ç—ã Drive-Thru"""
        alert_type = alert_data.get("alert_type")
        message = alert_data.get("message", "Drive-Thru alert")

        log_business_rule("Drive-Thru Alert", f"Lane {self.lane_number}: {alert_type} - {message}")

    def get_queue_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        return {
            "lane_number": self.lane_number,
            "queue_length": len(self._current_queue),
            "max_capacity": self._max_queue_size,
            "estimated_wait_time": len(self._current_queue) * self._average_service_time,
            "current_queue": self._current_queue.copy()
        }


# –§—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Observer
def demo_observer_pattern():
    """
    üìã CHECK: –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Observer –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π McDonald's
    """

    print("üëÅÔ∏è McDONALD'S OBSERVER PATTERN DEMO")
    print("=" * 50)

    # üîÑ TRANSFER: demo ‚Üí observer pattern
    log_transfer("demo_observer_pattern", "Observer Pattern", "observer demonstration")

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ Subject (–Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞)
    print("\n1. ORDER TRACKER CREATION (Subject)")
    print("-" * 30)

    order_tracker = OrderTracker("MCD0001")
    print(f"Created OrderTracker for restaurant: {order_tracker.restaurant_id}")

    # 2. –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    print("\n2. OBSERVERS CREATION")
    print("-" * 30)

    # –ö—É—Ö–æ–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π
    kitchen_display = KitchenDisplayObserver("KITCHEN_001", "main_kitchen")

    # –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    customer_app1 = CustomerMobileObserver("MOBILE_001", "CUST000001", "+1234567890")
    customer_app2 = CustomerMobileObserver("MOBILE_002", "CUST000002", "+1987654321")

    # Drive-Thru —Å–∏—Å—Ç–µ–º–∞
    drive_thru = DriveThruObserver("DRIVETHRU_001", lane_number=1)

    observers = [kitchen_display, customer_app1, customer_app2, drive_thru]

    for observer in observers:
        print(f"Created observer: {observer.name}")
        print(f"  Channels: {[ch.value for ch in observer.get_notification_channels()]}")

    # 3. –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    print("\n3. ATTACHING OBSERVERS")
    print("-" * 30)

    for observer in observers:
        order_tracker.attach(observer)
        print(f"Attached: {observer.name}")

    tracking_summary = order_tracker.get_tracking_summary()
    print(f"Total observers: {tracking_summary['total_observers']}")
    print(f"Active observers: {tracking_summary['active_observers']}")

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    print("\n4. ORDER TRACKING AND NOTIFICATIONS")
    print("-" * 30)

    # –ó–∞–∫–∞–∑ 1: Dine-in –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 1
    order1_data = {
        "customer_id": "CUST000001",
        "order_type": "dine_in",
        "total_amount": 15.99,
        "items_count": 3,
        "estimated_prep_time": 8
    }

    print("Creating dine-in order...")
    order_tracker.track_order("ORD000001", order1_data)

    # –ó–∞–∫–∞–∑ 2: Drive-Thru –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ 2
    order2_data = {
        "customer_id": "CUST000002",
        "order_type": "drive_thru",
        "total_amount": 12.50,
        "items_count": 2,
        "estimated_prep_time": 5
    }

    print("Creating drive-thru order...")
    order_tracker.track_order("ORD000002", order2_data)

    # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    print("\n5. ORDER STATUS UPDATES")
    print("-" * 30)

    status_updates = [
        ("ORD000001", "confirmed", {"payment_method": "credit_card"}),
        ("ORD000002", "confirmed", {"payment_method": "cash"}),
        ("ORD000001", "in_preparation", {"assigned_cook": "EMP1004"}),
        ("ORD000002", "in_preparation", {"assigned_cook": "EMP1005"}),
        ("ORD000001", "ready", {"pickup_location": "counter"}),
        ("ORD000002", "ready", {"lane_number": 1}),
        ("ORD000001", "completed", {"satisfaction_rating": 5}),
        ("ORD000002", "completed", {"service_time": 180})
    ]

    for order_id, status, additional_data in status_updates:
        print(f"Updating {order_id} to {status}...")
        order_tracker.update_order_status(order_id, status, additional_data)
        print()

    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    print("\n6. OBSERVER NOTIFICATIONS CHECK")
    print("-" * 30)

    # –ö—É—Ö–æ–Ω–Ω—ã–π –¥–∏—Å–ø–ª–µ–π
    print("Kitchen Display Queue:")
    kitchen_queue = kitchen_display.get_current_queue()
    for item in kitchen_queue:
        print(f"  {item['order_id']}: {item['status']} ({'PRIORITY' if item['is_priority'] else 'NORMAL'})")

    # –ú–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    print(f"\nCustomer App 1 notifications:")
    notifications1 = customer_app1.get_recent_notifications(5)
    for notif in notifications1:
        print(f"  {notif['timestamp'].strftime('%H:%M:%S')}: {notif['title']} - {notif['message']}")

    print(f"\nCustomer App 2 notifications:")
    notifications2 = customer_app2.get_recent_notifications(5)
    for notif in notifications2:
        print(f"  {notif['timestamp'].strftime('%H:%M:%S')}: {notif['title']} - {notif['message']}")

    # Drive-Thru
    print(f"\nDrive-Thru Queue Status:")
    queue_status = drive_thru.get_queue_status()
    print(f"  Queue length: {queue_status['queue_length']}")
    print(f"  Estimated wait: {queue_status['estimated_wait_time']} seconds")

    # 7. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
    print("\n7. OBSERVER DETACHMENT TEST")
    print("-" * 30)

    print("Detaching customer app 1...")
    order_tracker.detach(customer_app1)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    order3_data = {
        "customer_id": "CUST000003",
        "order_type": "takeout",
        "total_amount": 8.99,
        "items_count": 1
    }

    print("Creating new takeout order after detachment...")
    order_tracker.track_order("ORD000003", order3_data)
    order_tracker.update_order_status("ORD000003", "confirmed")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    new_notifications1 = customer_app1.get_recent_notifications(10)
    new_notifications2 = customer_app2.get_recent_notifications(10)

    print(f"Customer App 1 (detached) notifications: {len(new_notifications1)}")
    print(f"Customer App 2 (still attached) notifications: {len(new_notifications2)}")

    # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    print("\n8. OBSERVER STATISTICS")
    print("-" * 30)

    for observer in observers:
        stats = observer.get_stats()
        print(f"{stats['name']}:")
        print(f"  Active: {stats['is_active']}")
        print(f"  Notifications received: {stats['notification_count']}")
        print(f"  Last notification: {stats['last_notification']}")
        print()

    # 9. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    print("\n9. TRACKING SUMMARY")
    print("-" * 30)

    final_summary = order_tracker.get_tracking_summary()
    print(f"Restaurant: {final_summary['restaurant_id']}")
    print(f"Active orders: {final_summary['active_orders']}")
    print(f"Total observers: {final_summary['total_observers']}")
    print(f"Active observers: {final_summary['active_observers']}")
    print(f"Notifications sent: {final_summary['notifications_sent']}")

    # üìã CHECK: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ Observer
    log_requirement_check("Observer Pattern Demo", "COMPLETED", "observer.py")

    return order_tracker, observers


if __name__ == "__main__":
    demo_observer_pattern()