"""
McDonald's Management System - Custom Exceptions
‚úÖ WYMAGANIE: Utworzenie i u≈ºycie swojego wyjƒÖtku (w≈Çasna klasa dziedziƒÖca z Exception)

–í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã McDonald's
"""

from typing import Optional, Any
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —É—Ç–∏–ª–∏—Ç
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils.logger import log_error, log_requirement_check


# ‚úÖ WYMAGANIE: Dziedziczenie - –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å–ª–µ–¥—É—é—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞
class McDonaldsException(Exception):
    """
    üìã CHECK: W≈Çasne wyjƒÖtki - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π McDonald's
    –ë–∞–∑–æ–≤–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã McDonald's
    """

    def __init__(self, message: str, error_code: Optional[str] = None, details: Optional[Any] = None):
        self.message = message
        self.error_code = error_code or "MCDONALDS_ERROR"
        self.details = details
        super().__init__(self.message)

        # üö® LOG: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        log_error(f"McDonaldsException created: {self.error_code}", self)

    def __str__(self):
        return f"[{self.error_code}] {self.message}"


# ‚úÖ WYMAGANIE: Dziedziczenie - Menu related exceptions
class MenuException(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–Ω—é"""
    pass


class MenuItemNotAvailableException(MenuException):
    """
    üìã CHECK: W≈Çasne wyjƒÖtki - –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç McDonaldsException
    –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –ø–æ–∑–∏—Ü–∏—è –º–µ–Ω—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    """

    def __init__(self, item_name: str, reason: str = "Item temporarily unavailable"):
        self.item_name = item_name
        self.reason = reason
        message = f"Menu item '{item_name}' is not available: {reason}"
        super().__init__(message, "MENU_ITEM_UNAVAILABLE", {"item": item_name, "reason": reason})


class InsufficientIngredientsException(MenuException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤"""

    def __init__(self, ingredient: str, required: int, available: int):
        self.ingredient = ingredient
        self.required = required
        self.available = available
        message = f"Insufficient {ingredient}: need {required}, have {available}"
        super().__init__(message, "INSUFFICIENT_INGREDIENTS",
                         {"ingredient": ingredient, "required": required, "available": available})


# ‚úÖ WYMAGANIE: Dziedziczenie - Order related exceptions
class OrderException(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    pass


class InvalidOrderException(OrderException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º –∑–∞–∫–∞–∑–µ"""

    def __init__(self, order_id: str, reason: str):
        self.order_id = order_id
        self.reason = reason
        message = f"Invalid order {order_id}: {reason}"
        super().__init__(message, "INVALID_ORDER", {"order_id": order_id, "reason": reason})


class OrderTimeoutException(OrderException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–∫–∞–∑–∞"""

    def __init__(self, order_id: str, timeout_minutes: int):
        self.order_id = order_id
        self.timeout_minutes = timeout_minutes
        message = f"Order {order_id} timed out after {timeout_minutes} minutes"
        super().__init__(message, "ORDER_TIMEOUT", {"order_id": order_id, "timeout": timeout_minutes})


class DriveThruQueueFullException(OrderException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å Drive-Thru –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞"""

    def __init__(self, max_capacity: int):
        self.max_capacity = max_capacity
        message = f"Drive-Thru queue is full (max capacity: {max_capacity})"
        super().__init__(message, "DRIVE_THRU_QUEUE_FULL", {"max_capacity": max_capacity})


# ‚úÖ WYMAGANIE: Dziedziczenie - Payment related exceptions
class PaymentException(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–ø–ª–∞—Ç–æ–π"""
    pass


class PaymentProcessingException(PaymentException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞"""

    def __init__(self, payment_method: str, amount: float, reason: str):
        self.payment_method = payment_method
        self.amount = amount
        self.reason = reason
        message = f"Payment failed: {payment_method} for ${amount:.2f} - {reason}"
        super().__init__(message, "PAYMENT_FAILED",
                         {"method": payment_method, "amount": amount, "reason": reason})


class InsufficientFundsException(PaymentException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤"""

    def __init__(self, required: float, available: float):
        self.required = required
        self.available = available
        message = f"Insufficient funds: need ${required:.2f}, have ${available:.2f}"
        super().__init__(message, "INSUFFICIENT_FUNDS",
                         {"required": required, "available": available})


# ‚úÖ WYMAGANIE: Dziedziczenie - Staff related exceptions
class StaffException(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
    pass


class UnauthorizedAccessException(StaffException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ"""

    def __init__(self, employee_id: str, action: str, required_level: str):
        self.employee_id = employee_id
        self.action = action
        self.required_level = required_level
        message = f"Employee {employee_id} not authorized for '{action}' (requires {required_level})"
        super().__init__(message, "UNAUTHORIZED_ACCESS",
                         {"employee": employee_id, "action": action, "required": required_level})


class ShiftOverlapException(StaffException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å–º–µ–Ω"""

    def __init__(self, employee_id: str, shift_time: str):
        self.employee_id = employee_id
        self.shift_time = shift_time
        message = f"Shift overlap detected for employee {employee_id} at {shift_time}"
        super().__init__(message, "SHIFT_OVERLAP", {"employee": employee_id, "time": shift_time})


# ‚úÖ WYMAGANIE: Dziedziczenie - Kitchen related exceptions
class KitchenException(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫—É—Ö–Ω–µ–π"""
    pass


class EquipmentFailureException(KitchenException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª–æ–º–∫–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è"""

    def __init__(self, equipment_name: str, failure_type: str):
        self.equipment_name = equipment_name
        self.failure_type = failure_type
        message = f"Equipment failure: {equipment_name} - {failure_type}"
        super().__init__(message, "EQUIPMENT_FAILURE",
                         {"equipment": equipment_name, "failure": failure_type})


class FoodSafetyException(KitchenException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–∏—â–∏"""

    def __init__(self, issue: str, severity: str = "HIGH"):
        self.issue = issue
        self.severity = severity
        message = f"Food safety violation ({severity}): {issue}"
        super().__init__(message, "FOOD_SAFETY_VIOLATION", {"issue": issue, "severity": severity})


# McDonald's —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
class HappyMealToyOutOfStockException(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∏–≥—Ä—É—à–∫–∏ –¥–ª—è Happy Meal –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"""

    def __init__(self, toy_name: str):
        self.toy_name = toy_name
        message = f"Happy Meal toy '{toy_name}' is out of stock"
        super().__init__(message, "HAPPY_MEAL_TOY_OUT_OF_STOCK", {"toy": toy_name})


class McCafeEquipmentDownException(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ McCafe –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""

    def __init__(self, equipment: str, estimated_fix_time: int):
        self.equipment = equipment
        self.estimated_fix_time = estimated_fix_time
        message = f"McCafe {equipment} is down (estimated fix: {estimated_fix_time} minutes)"
        super().__init__(message, "MCCAFE_EQUIPMENT_DOWN",
                         {"equipment": equipment, "fix_time": estimated_fix_time})


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def test_exceptions():
    """
    üìã CHECK: W≈Çasne wyjƒÖtki - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    """

    # üîÑ TRANSFER: exceptions ‚Üí logger (log_requirement_check)
    log_requirement_check("Custom Exceptions", "TESTING", "mcdonalds_exceptions.py")

    print("üß™ Testing McDonald's Custom Exceptions...")

    exceptions_to_test = [
        (MenuItemNotAvailableException, ("Big Mac", "Out of beef patties")),
        (InsufficientIngredientsException, ("cheese", 5, 2)),
        (InvalidOrderException, ("ORD123", "Contains discontinued item")),
        (OrderTimeoutException, ("ORD124", 15)),
        (DriveThruQueueFullException, (10,)),
        (PaymentProcessingException, ("Credit Card", 12.99, "Card declined")),
        (InsufficientFundsException, (15.50, 10.25)),
        (UnauthorizedAccessException, ("EMP001", "modify_prices", "Manager")),
        (ShiftOverlapException, ("EMP002", "14:00-22:00")),
        (EquipmentFailureException, ("Fryer #1", "Temperature sensor malfunction")),
        (FoodSafetyException, ("Temperature too high in fridge #2", "CRITICAL")),
        (HappyMealToyOutOfStockException, ("Pokemon Pikachu",)),
        (McCafeEquipmentDownException, ("Espresso Machine", 30))
    ]

    for exception_class, args in exceptions_to_test:
        try:
            raise exception_class(*args)
        except McDonaldsException as e:
            print(f"‚úÖ {exception_class.__name__}: {e}")
            # üö® LOG: –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            log_requirement_check("Exception Hierarchy", "WORKING",
                                  f"{exception_class.__name__} in mcdonalds_exceptions.py")

    print("\nüìã CHECK: –í—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    test_exceptions()