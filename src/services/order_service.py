"""
McDonald's Management System - Order Service
‚úÖ WYMAGANIE: Serwisy - warstwa biznesowa do zarzƒÖdzania zam√≥wieniami
‚úÖ WYMAGANIE: Integracja wszystkich wzorc√≥w i komponent√≥w

–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ McDonald's
"""

from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Tuple
from enum import Enum
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from src.utils.logger import log_transfer, log_requirement_check, log_operation, log_business_rule
from src.exceptions.mcdonalds_exceptions import *
from src.models.order import Order, OrderStatus, OrderType
from src.models.payment import Payment, PaymentStatus
from src.models.customer import Customer, CustomerType
from src.models.menu import MenuItem
from src.patterns.factory import OrderFactoryManager, OrderFactory
from src.patterns.strategy import DiscountManager, DiscountStrategy
from src.patterns.observer import OrderTracker, OrderObserver, NotificationType


class OrderServiceError(McDonaldsException):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–∫–∞–∑–æ–≤"""
    pass


class OrderPriority(Enum):
    LOW = 1
    NORMAL = 2
    HIGH = 3
    URGENT = 4
    CRITICAL = 5


class OrderValidationResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–∞"""

    def __init__(self, is_valid: bool, errors: List[str] = None, warnings: List[str] = None):
        self.is_valid = is_valid
        self.errors = errors or []
        self.warnings = warnings or []

    def add_error(self, error: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.errors.append(error)
        self.is_valid = False

    def add_warning(self, warning: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        self.warnings.append(warning)


class OrderService:
    """
    üìã CHECK: Serwisy - –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
    ‚úÖ WYMAGANIE: Integracja wzorc√≥w - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Factory, Strategy, Observer

    –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –∑–∞–∫–∞–∑–æ–≤ McDonald's
    """

    def __init__(self, restaurant_id: str):
        self.restaurant_id = restaurant_id

        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
        self._factory_manager: Optional[OrderFactoryManager] = None
        self._discount_manager: Optional[DiscountManager] = None
        self._order_tracker: Optional[OrderTracker] = None

        # –•—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–∞–Ω–Ω—ã—Ö
        self._active_orders: Dict[str, Order] = {}
        self._completed_orders: List[Order] = []
        self._order_queue: List[str] = []  # Order IDs –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        self._order_history: List[Dict[str, Any]] = []

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        self._max_active_orders = 50
        self._order_timeout_minutes = 30
        self._priority_weights = {
            OrderPriority.CRITICAL: 5,
            OrderPriority.URGENT: 4,
            OrderPriority.HIGH: 3,
            OrderPriority.NORMAL: 2,
            OrderPriority.LOW: 1
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._orders_processed_today = 0
        self._total_revenue_today = 0.0
        self._service_metrics = {
            "average_preparation_time": 0.0,
            "customer_satisfaction": 4.5,
            "order_accuracy": 98.5
        }

        # üìã CHECK: Serwisy - —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω
        log_requirement_check("Service Layer", "CREATED", f"OrderService: {restaurant_id}")

        # üîÑ TRANSFER: order_service.py ‚Üí logger (service initialization)
        log_transfer("OrderService", "system initialization", "order service setup")

    # ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ò –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø =====

    def configure_factory_manager(self, factory_manager: OrderFactoryManager):
        """
        üìã CHECK: Integracja wzorc√≥w - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Factory Manager
        """
        self._factory_manager = factory_manager
        log_business_rule("Factory Integration", f"OrderService connected to {factory_manager.restaurant_id}")
        log_requirement_check("Pattern Integration", "FACTORY_CONNECTED", "OrderService ‚Üî Factory")

    def configure_discount_manager(self, discount_manager: DiscountManager):
        """
        üìã CHECK: Integracja wzorc√≥w - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Discount Manager (Strategy)
        """
        self._discount_manager = discount_manager
        log_business_rule("Strategy Integration", "OrderService connected to DiscountManager")
        log_requirement_check("Pattern Integration", "STRATEGY_CONNECTED", "OrderService ‚Üî Strategy")

    def configure_order_tracker(self, order_tracker: OrderTracker):
        """
        üìã CHECK: Integracja wzorc√≥w - –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Order Tracker (Observer)
        """
        self._order_tracker = order_tracker
        log_business_rule("Observer Integration", "OrderService connected to OrderTracker")
        log_requirement_check("Pattern Integration", "OBSERVER_CONNECTED", "OrderService ‚Üî Observer")

    # ===== –°–û–ó–î–ê–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–ö–ê–ó–û–í =====

    def create_order(self, order_type: OrderType, customer_id: str = "",
                     menu_items: List[Dict[str, Any]] = None, **kwargs) -> Order:
        """
        üìã CHECK: Serwisy - –≥–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
        –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏—Å–ø–æ–ª—å–∑—É—è Factory Method
        """
        # üîÑ TRANSFER: OrderService ‚Üí Factory Manager (order creation request)
        log_transfer("OrderService", "OrderFactoryManager", f"create {order_type.value} order")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if len(self._active_orders) >= self._max_active_orders:
            raise OrderServiceError("Maximum active orders limit reached", "ORDER_LIMIT_EXCEEDED")

        if not self._factory_manager:
            raise OrderServiceError("Factory manager not configured", "FACTORY_NOT_CONFIGURED")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ Factory Manager
        order = self._factory_manager.create_order(order_type, customer_id, **kwargs)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
        if menu_items:
            for item_data in menu_items:
                self._add_menu_item_to_order(order, item_data)

        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
        validation_result = self.validate_order(order)
        if not validation_result.is_valid:
            raise OrderServiceError(f"Order validation failed: {validation_result.errors}", "VALIDATION_FAILED")

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å Discount Manager
        if self._discount_manager and customer_id:
            self._apply_discounts_to_order(order, customer_id)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        self._active_orders[order.order_id] = order

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        priority = self._calculate_order_priority(order, kwargs.get('customer_data', {}))
        self._add_to_priority_queue(order.order_id, priority)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ Observer
        if self._order_tracker:
            order_data = self._prepare_order_data_for_notification(order)
            self._order_tracker.track_order(order.order_id, order_data)

        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        log_business_rule("Order Created",
                          f"Service created {order_type.value} order {order.order_id}")

        return order

    def validate_order(self, order: Order) -> OrderValidationResult:
        """
        üìã CHECK: Walidacja - –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–∫–∞–∑–∞
        """
        result = OrderValidationResult(True)

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not order.order_id:
            result.add_error("Order ID is required")

        if order.items_count == 0:
            result.add_error("Order must contain at least one item")

        if order.total_amount <= 0:
            result.add_error("Order total must be positive")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É –∑–∞–∫–∞–∑–∞
        try:
            order.validate_order()
        except Exception as e:
            result.add_error(f"Order type validation failed: {str(e)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–≤—Ç—Ä–∞–∫–æ–≤
        if hasattr(order, '_items'):
            breakfast_items = [item for item in order.get_items_list()
                               if 'breakfast' in item.get('name', '').lower()]
            if breakfast_items and not self._is_breakfast_time():
                result.add_warning("Breakfast items may not be available outside breakfast hours")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
        if order.items_count > 20:
            result.add_warning("Large order may require additional preparation time")

        if order.total_amount > 100.0:
            result.add_warning("High-value order may require manager approval")

        log_business_rule("Order Validation",
                          f"Order {order.order_id}: {'VALID' if result.is_valid else 'INVALID'}")

        return result

    def _add_menu_item_to_order(self, order: Order, item_data: Dict[str, Any]):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –º–µ–Ω—é –∫ –∑–∞–∫–∞–∑—É"""
        item_name = item_data.get('name', '')
        quantity = item_data.get('quantity', 1)
        price = item_data.get('price', 0.0)
        customizations = item_data.get('customizations', [])

        order.add_item(item_name, quantity, price, customizations)

        log_business_rule("Item Added",
                          f"Order {order.order_id}: {quantity}x {item_name}")

    def _apply_discounts_to_order(self, order: Order, customer_id: str):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫–∏ –∫ –∑–∞–∫–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É—è Strategy pattern"""
        if not self._discount_manager:
            return

        # üîÑ TRANSFER: OrderService ‚Üí DiscountManager (discount calculation)
        log_transfer("OrderService", "DiscountManager", f"discount calculation for {order.order_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
        customer_data = self._get_customer_data(customer_id)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª—É—á—à—É—é —Å–∫–∏–¥–∫—É
        order_items = order.get_items_list()
        discount_result = self._discount_manager.calculate_best_discount(
            order.total_amount, order_items, customer_data
        )

        if discount_result.get("applicable", False):
            discount_amount = discount_result["discount_amount"]
            order.apply_discount(discount_amount, discount_result["reason"])

            log_business_rule("Discount Applied",
                              f"Order {order.order_id}: ${discount_amount:.2f} discount via {discount_result['strategy_name']}")

    # ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ñ–ò–ó–ù–ï–ù–ù–´–ú –¶–ò–ö–õ–û–ú –ó–ê–ö–ê–ó–ê =====

    def update_order_status(self, order_id: str, new_status: OrderStatus,
                            additional_data: Dict[str, Any] = None) -> bool:
        """
        üìã CHECK: Serwisy - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
        """
        if order_id not in self._active_orders:
            log_business_rule("Status Update Failed", f"Order {order_id} not found")
            return False

        order = self._active_orders[order_id]
        old_status = order.status

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        order.status = new_status

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ Observer
        if self._order_tracker:
            self._order_tracker.update_order_status(order_id, new_status.value, additional_data)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–æ–±—ã–µ —Å—Ç–∞—Ç—É—Å—ã
        if new_status == OrderStatus.COMPLETED:
            self._complete_order(order_id)
        elif new_status == OrderStatus.CANCELLED:
            self._cancel_order(order_id)

        log_business_rule("Order Status Updated",
                          f"Order {order_id}: {old_status.value} ‚Üí {new_status.value}")

        return True

    def process_payment(self, order_id: str, payment: Payment) -> bool:
        """
        üìã CHECK: Serwisy - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        üìã CHECK: Polimorfizm - –ø–æ–ª–∏–º–æ—Ä—Ñ–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
        """
        if order_id not in self._active_orders:
            raise OrderServiceError(f"Order {order_id} not found", "ORDER_NOT_FOUND")

        order = self._active_orders[order_id]

        # üîÑ TRANSFER: OrderService ‚Üí Payment (polymorphic processing)
        log_transfer("OrderService", "Payment", f"process payment for {order_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
        if payment.amount < order.total_amount:
            raise PaymentProcessingException(
                payment.get_payment_method().value,
                payment.amount,
                f"Insufficient payment: need ${order.total_amount:.2f}, got ${payment.amount:.2f}"
            )

        try:
            # –ü–æ–ª–∏–º–æ—Ä—Ñ–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            success = payment.process_payment()

            if success:
                order.payment_status = PaymentStatus.COMPLETED
                order.status = OrderStatus.CONFIRMED

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self._total_revenue_today += payment.net_amount

                # –£–≤–µ–¥–æ–º–ª—è–µ–º —á–µ—Ä–µ–∑ Observer
                if self._order_tracker:
                    self._order_tracker.notify(
                        NotificationType.PAYMENT_PROCESSED,
                        {
                            "order_id": order_id,
                            "payment_method": payment.get_payment_method().value,
                            "amount": payment.amount
                        }
                    )

                log_business_rule("Payment Processed",
                                  f"Order {order_id}: {payment.get_payment_method().value} ${payment.amount:.2f}")

                return True
            else:
                order.payment_status = PaymentStatus.FAILED
                return False

        except Exception as e:
            order.payment_status = PaymentStatus.FAILED
            log_business_rule("Payment Failed", f"Order {order_id}: {str(e)}")
            raise

    def _complete_order(self, order_id: str):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–∫–∞–∑"""
        if order_id in self._active_orders:
            order = self._active_orders[order_id]

            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            self._completed_orders.append(order)
            del self._active_orders[order_id]

            # –£–±–∏—Ä–∞–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            if order_id in self._order_queue:
                self._order_queue.remove(order_id)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._orders_processed_today += 1

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
            if self._order_tracker:
                self._order_tracker.complete_order_tracking(order_id)

            log_business_rule("Order Completed", f"Order {order_id} moved to completed")

    def _cancel_order(self, order_id: str):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑"""
        if order_id in self._active_orders:
            order = self._active_orders[order_id]

            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –≤–æ–∑–≤—Ä–∞—Ç
            if order.payment_status == PaymentStatus.COMPLETED:
                log_business_rule("Refund Required", f"Order {order_id} cancellation may require refund")

            # –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –æ—á–µ—Ä–µ–¥–∏
            del self._active_orders[order_id]
            if order_id in self._order_queue:
                self._order_queue.remove(order_id)

            log_business_rule("Order Cancelled", f"Order {order_id} cancelled")

    # ===== –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–ß–ï–†–ï–î–¨–Æ –ò –ü–†–ò–û–†–ò–¢–ï–¢–ê–ú–ò =====

    def _calculate_order_priority(self, order: Order, customer_data: Dict[str, Any]) -> OrderPriority:
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–∫–∞–∑–∞"""
        priority = OrderPriority.NORMAL

        # VIP –∫–ª–∏–µ–Ω—Ç—ã
        customer_type = customer_data.get('customer_type', '')
        if customer_type == CustomerType.VIP.value:
            priority = OrderPriority.URGENT
        elif customer_type == CustomerType.LOYALTY_MEMBER.value:
            priority = OrderPriority.HIGH

        # –¢–∏–ø –∑–∞–∫–∞–∑–∞
        if order.get_order_type() == OrderType.DELIVERY:
            if priority.value < OrderPriority.HIGH.value:
                priority = OrderPriority.HIGH

        # –†–∞–∑–º–µ—Ä –∑–∞–∫–∞–∑–∞
        if order.items_count > 10:
            if priority.value < OrderPriority.HIGH.value:
                priority = OrderPriority.HIGH

        # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        creation_time = getattr(order, '_order_time', datetime.now())
        wait_time = datetime.now() - creation_time
        if wait_time > timedelta(minutes=15):
            priority = OrderPriority.URGENT

        return priority

    def _add_to_priority_queue(self, order_id: str, priority: OrderPriority):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
        insert_position = len(self._order_queue)

        for i, existing_order_id in enumerate(self._order_queue):
            existing_order = self._active_orders.get(existing_order_id)
            if existing_order:
                existing_priority = self._calculate_order_priority(existing_order, {})
                if priority.value > existing_priority.value:
                    insert_position = i
                    break

        self._order_queue.insert(insert_position, order_id)

        log_business_rule("Queue Updated",
                          f"Order {order_id} added to queue at position {insert_position + 1} ({priority.name})")

    def get_next_order_for_preparation(self) -> Optional[Order]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        if not self._order_queue:
            return None

        # –ë–µ—Ä–µ–º –∑–∞–∫–∞–∑ —Å –Ω–∞–∏–≤—ã—Å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        next_order_id = self._order_queue[0]
        if next_order_id in self._active_orders:
            order = self._active_orders[next_order_id]

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏"
            if order.status == OrderStatus.CONFIRMED:
                self.update_order_status(next_order_id, OrderStatus.IN_PREPARATION)
                self._order_queue.remove(next_order_id)

                log_business_rule("Order Started", f"Order {next_order_id} started preparation")
                return order

        return None

    # ===== –ê–ù–ê–õ–ò–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´ =====

    def get_service_statistics(self) -> Dict[str, Any]:
        """
        üìã CHECK: Serwisy - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞
        """
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º
        active_by_status = {}
        active_by_type = {}

        for order in self._active_orders.values():
            status = order.status.value
            order_type = order.get_order_type().value

            active_by_status[status] = active_by_status.get(status, 0) + 1
            active_by_type[order_type] = active_by_type.get(order_type, 0) + 1

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_orders = len(self._completed_orders)
        avg_order_value = self._total_revenue_today / max(total_orders, 1)

        return {
            "restaurant_id": self.restaurant_id,
            "date": datetime.now().strftime("%Y-%m-%d"),
            "active_orders": {
                "total": len(self._active_orders),
                "by_status": active_by_status,
                "by_type": active_by_type,
                "queue_length": len(self._order_queue)
            },
            "completed_orders": {
                "total": len(self._completed_orders),
                "today": self._orders_processed_today
            },
            "financial": {
                "total_revenue_today": self._total_revenue_today,
                "average_order_value": avg_order_value,
                "orders_processed": self._orders_processed_today
            },
            "performance": {
                "service_metrics": self._service_metrics,
                "max_active_orders": self._max_active_orders,
                "order_timeout_minutes": self._order_timeout_minutes
            },
            "integrations": {
                "factory_manager_connected": self._factory_manager is not None,
                "discount_manager_connected": self._discount_manager is not None,
                "order_tracker_connected": self._order_tracker is not None
            }
        }

    def generate_hourly_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç"""
        current_hour = datetime.now().hour

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞–ª–∏—Å—å –±—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        hourly_data = {
            "hour": current_hour,
            "orders_created": len(self._active_orders) + len(self._completed_orders),
            "orders_completed": len(self._completed_orders),
            "revenue": self._total_revenue_today,
            "average_prep_time": self._service_metrics["average_preparation_time"],
            "customer_satisfaction": self._service_metrics["customer_satisfaction"]
        }

        return hourly_data

    # ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    def _get_customer_data(self, customer_id: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–∞–ª–∏—Å—å –±—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        return {
            "customer_id": customer_id,
            "customer_type": "regular",
            "loyalty_tier": "bronze"
        }

    def _prepare_order_data_for_notification(self, order: Order) -> Dict[str, Any]:
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        return {
            "customer_id": order.customer_id,
            "order_type": order.get_order_type().value,
            "total_amount": order.total_amount,
            "items_count": order.items_count,
            "estimated_prep_time": order.estimated_prep_time,
            "special_instructions": order.special_instructions
        }

    def _is_breakfast_time(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞–∫–∞"""
        current_time = datetime.now().time()
        breakfast_end = datetime.strptime("10:30", "%H:%M").time()
        return current_time <= breakfast_end

    # ===== –û–ü–ï–†–ê–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====

    def cancel_order(self, order_id: str, reason: str = "") -> bool:
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑"""
        if order_id not in self._active_orders:
            return False

        self.update_order_status(order_id, OrderStatus.CANCELLED, {"reason": reason})
        return True

    def mark_order_ready(self, order_id: str) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤—ã–º"""
        if order_id not in self._active_orders:
            return False

        self.update_order_status(order_id, OrderStatus.READY, {"ready_time": datetime.now()})
        return True

    def get_order_by_id(self, order_id: str) -> Optional[Order]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑ –ø–æ ID"""
        return self._active_orders.get(order_id)

    def get_orders_by_status(self, status: OrderStatus) -> List[Order]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
        return [order for order in self._active_orders.values() if order.status == status]

    def get_orders_by_type(self, order_type: OrderType) -> List[Order]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ —Ç–∏–ø—É"""
        return [order for order in self._active_orders.values()
                if order.get_order_type() == order_type]

    def cleanup_expired_orders(self):
        """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        current_time = datetime.now()
        expired_orders = []

        for order_id, order in self._active_orders.items():
            order_time = getattr(order, '_order_time', current_time)
            if current_time - order_time > timedelta(minutes=self._order_timeout_minutes):
                expired_orders.append(order_id)

        for order_id in expired_orders:
            self.cancel_order(order_id, "Order timeout")
            log_business_rule("Order Expired", f"Order {order_id} cancelled due to timeout")

        return len(expired_orders)


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
def demo_order_service():
    """
    üìã CHECK: –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
    """

    print("üéõÔ∏è McDONALD'S ORDER SERVICE DEMO")
    print("=" * 50)

    # üîÑ TRANSFER: demo ‚Üí order service
    log_transfer("demo_order_service", "OrderService", "service demonstration")

    # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
    print("\n1. ORDER SERVICE CREATION")
    print("-" * 30)

    order_service = OrderService("MCD0001")
    print(f"Created OrderService for restaurant: {order_service.restaurant_id}")

    # 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π (–∑–∞–≥–ª—É—à–∫–∏)
    print("\n2. SERVICE INTEGRATION")
    print("-" * 30)

    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    from src.patterns.factory import OrderFactoryManager, DineInOrderFactory, DriveThruOrderFactory
    from src.patterns.strategy import DiscountManager, PercentageDiscountStrategy
    from src.patterns.observer import OrderTracker

    # Factory Manager
    factory_manager = OrderFactoryManager("MCD0001")
    dine_in_factory = DineInOrderFactory("DINEIN_001", "MCD0001")
    drive_thru_factory = DriveThruOrderFactory("DRIVETHRU_001", "MCD0001")

    factory_manager.register_factory(OrderType.DINE_IN, dine_in_factory)
    factory_manager.register_factory(OrderType.DRIVE_THRU, drive_thru_factory)

    order_service.configure_factory_manager(factory_manager)
    print("‚úÖ Factory Manager configured")

    # Discount Manager
    discount_manager = DiscountManager()
    student_discount = PercentageDiscountStrategy("Student Discount", 15.0, min_order_amount=10.0)
    discount_manager.add_strategy(student_discount)

    order_service.configure_discount_manager(discount_manager)
    print("‚úÖ Discount Manager configured")

    # Order Tracker
    order_tracker = OrderTracker("MCD0001")
    order_service.configure_order_tracker(order_tracker)
    print("‚úÖ Order Tracker configured")

    # 3. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    print("\n3. ORDER CREATION")
    print("-" * 30)

    # –ü—Ä–æ—Å—Ç–æ–π Dine-In –∑–∞–∫–∞–∑
    menu_items1 = [
        {"name": "Big Mac", "quantity": 1, "price": 4.99},
        {"name": "French Fries", "quantity": 1, "price": 2.49},
        {"name": "Coca-Cola", "quantity": 1, "price": 1.79}
    ]

    order1 = order_service.create_order(
        OrderType.DINE_IN,
        customer_id="CUST001",
        menu_items=menu_items1,
        party_size=2,
        customer_data={"customer_type": "student"}
    )
    print(f"Created dine-in order: {order1.order_id} (${order1.total_amount:.2f})")

    # Drive-Thru –∑–∞–∫–∞–∑
    menu_items2 = [
        {"name": "Quarter Pounder", "quantity": 1, "price": 5.49},
        {"name": "Large Fries", "quantity": 1, "price": 2.99}
    ]

    order2 = order_service.create_order(
        OrderType.DRIVE_THRU,
        customer_id="CUST002",
        menu_items=menu_items2,
        vehicle_type="car",
        customer_data={"customer_type": "vip"}
    )
    print(f"Created drive-thru order: {order2.order_id} (${order2.total_amount:.2f})")

    # 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
    print("\n4. PAYMENT PROCESSING")
    print("-" * 30)

    from src.models.payment import CashPayment, CardPayment

    # –ü–ª–∞—Ç–µ–∂ –∑–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑
    payment1 = CashPayment.create_exact_change(order1.total_amount)
    success1 = order_service.process_payment(order1.order_id, payment1)
    print(f"Payment for {order1.order_id}: {'SUCCESS' if success1 else 'FAILED'}")

    # –ü–ª–∞—Ç–µ–∂ –∑–∞ –≤—Ç–æ—Ä–æ–π –∑–∞–∫–∞–∑
    payment2 = CardPayment.create_contactless_payment(order2.total_amount, "TOKEN123")
    success2 = order_service.process_payment(order2.order_id, payment2)
    print(f"Payment for {order2.order_id}: {'SUCCESS' if success2 else 'FAILED'}")

    # 5. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥—å—é
    print("\n5. ORDER QUEUE MANAGEMENT")
    print("-" * 30)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
    next_order = order_service.get_next_order_for_preparation()
    if next_order:
        print(f"Next order for preparation: {next_order.order_id}")

        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
        order_service.mark_order_ready(next_order.order_id)
        print(f"Order {next_order.order_id} marked as ready")

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
        order_service.update_order_status(next_order.order_id, OrderStatus.COMPLETED)
        print(f"Order {next_order.order_id} completed")

    # 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    print("\n6. SERVICE STATISTICS")
    print("-" * 30)

    stats = order_service.get_service_statistics()
    print(f"Restaurant: {stats['restaurant_id']}")
    print(f"Active orders: {stats['active_orders']['total']}")
    print(f"Completed orders: {stats['completed_orders']['total']}")
    print(f"Total revenue today: ${stats['financial']['total_revenue_today']:.2f}")
    print(f"Average order value: ${stats['financial']['average_order_value']:.2f}")

    print("\nIntegrations:")
    for integration, connected in stats['integrations'].items():
        status = "‚úÖ Connected" if connected else "‚ùå Not connected"
        print(f"  {integration}: {status}")

    # 7. –ü–æ—á–∞—Å–æ–≤–æ–π –æ—Ç—á–µ—Ç
    print("\n7. HOURLY REPORT")
    print("-" * 30)

    hourly_report = order_service.generate_hourly_report()
    print(f"Hour: {hourly_report['hour']}:00")
    print(f"Orders created: {hourly_report['orders_created']}")
    print(f"Orders completed: {hourly_report['orders_completed']}")
    print(f"Revenue: ${hourly_report['revenue']:.2f}")
    print(f"Customer satisfaction: {hourly_report['customer_satisfaction']:.1f}/5.0")

    # üìã CHECK: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    log_requirement_check("Order Service Demo", "COMPLETED", "order_service.py")

    return order_service


if __name__ == "__main__":
    demo_order_service()