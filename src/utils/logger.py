"""
McDonald's Management System - Logger Module
‚úÖ WYMAGANIE: –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π

Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
import os
from datetime import datetime
from typing import Any, Dict, Optional
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è Windows
if sys.platform.startswith('win'):
    import locale
    locale.setlocale(locale.LC_ALL, 'C')

class McDonaldsLogger:
    """
    üìã CHECK: –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è McDonald's
    Windows-—Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ Unicode —Å–∏–º–≤–æ–ª–æ–≤
    """

    def __init__(self, name: str = "mcdonalds_system"):
        self.logger = logging.getLogger(name)
        self.logger.setLevel(logging.INFO)

        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ handlers
        self.logger.handlers.clear()

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = "logs"
        if not os.path.exists(log_dir):
            os.makedirs(log_dir)

        # –§–∞–π–ª –ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π
        log_filename = f"{log_dir}/mcdonalds_{datetime.now().strftime('%Y%m%d')}.log"

        # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –±–µ–∑ Unicode —Å–∏–º–≤–æ–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º ASCII)
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)s | %(name)s | %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )

        # File handler —Å UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        try:
            file_handler = logging.FileHandler(log_filename, encoding='utf-8')
            file_handler.setLevel(logging.INFO)
            file_handler.setFormatter(formatter)
            self.logger.addHandler(file_handler)
        except Exception as e:
            print(f"Warning: Could not create file handler: {e}")

        # Console handler —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        try:
            console_handler = logging.StreamHandler(sys.stdout)
            console_handler.setLevel(logging.INFO)

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ (–±–µ–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤)
            console_formatter = logging.Formatter(
                '%(asctime)s | %(levelname)s | %(message)s',
                datefmt='%H:%M:%S'
            )
            console_handler.setFormatter(console_formatter)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
            if hasattr(console_handler.stream, 'reconfigure'):
                console_handler.stream.reconfigure(encoding='utf-8', errors='replace')

            self.logger.addHandler(console_handler)
        except Exception as e:
            print(f"Warning: Could not create console handler: {e}")

    def log_operation(self, operation: str, details: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        details_str = ""
        if details:
            details_parts = []
            for key, value in details.items():
                details_parts.append(f"{key}={value}")
            details_str = " | " + " | ".join(details_parts)

        message = f"OPERATION: {operation}{details_str}"
        self.logger.info(message)

    def log_business_rule(self, rule_name: str, description: str):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞"""
        message = f"BUSINESS RULE: {rule_name} | {description}"
        self.logger.info(message)

    def log_requirement_check(self, requirement: str, status: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
        details_str = f" | {details}" if details else ""
        message = f"REQUIREMENT CHECK: {requirement} | {status}{details_str}"
        self.logger.info(message)

    def log_transfer(self, from_module: str, to_module: str, data_type: str, details: str = ""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏ (–±–µ–∑ Unicode —Å–∏–º–≤–æ–ª–æ–≤)"""
        details_str = f" | {details}" if details else ""
        # –ó–∞–º–µ–Ω—è–µ–º Unicode —Å—Ç—Ä–µ–ª–∫—É –Ω–∞ ASCII
        message = f"TRANSFER: {from_module} -> {to_module} | {data_type}{details_str}"
        self.logger.info(message)

    def log_error(self, error_type: str, error_message: str, context: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏"""
        context_str = ""
        if context:
            context_parts = []
            for key, value in context.items():
                context_parts.append(f"{key}={value}")
            context_str = " | Context: " + ", ".join(context_parts)

        message = f"ERROR: {error_type} | {error_message}{context_str}"
        self.logger.error(message)

    def log_performance(self, operation: str, duration_ms: float, additional_data: Dict[str, Any] = None):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        additional_str = ""
        if additional_data:
            additional_parts = []
            for key, value in additional_data.items():
                additional_parts.append(f"{key}={value}")
            additional_str = " | " + " | ".join(additional_parts)

        message = f"PERFORMANCE: {operation} | {duration_ms:.2f}ms{additional_str}"
        self.logger.info(message)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
mcdonalds_logger = McDonaldsLogger()

# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
def log_operation(operation: str, details: Dict[str, Any] = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π"""
    mcdonalds_logger.log_operation(operation, details)

def log_business_rule(rule_name: str, description: str):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª"""
    mcdonalds_logger.log_business_rule(rule_name, description)

def log_requirement_check(requirement: str, status: str, details: str = ""):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    mcdonalds_logger.log_requirement_check(requirement, status, details)

def log_transfer(from_module: str, to_module: str, data_type: str, details: str = ""):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á –¥–∞–Ω–Ω—ã—Ö"""
    mcdonalds_logger.log_transfer(from_module, to_module, data_type, details)

def log_error(error_type: str, error_message: str, context: Dict[str, Any] = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫"""
    mcdonalds_logger.log_error(error_type, error_message, context)

def log_performance(operation: str, duration_ms: float, additional_data: Dict[str, Any] = None):
    """–£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    mcdonalds_logger.log_performance(operation, duration_ms, additional_data)


# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def demo_logging_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìã McDONALD'S LOGGING SYSTEM DEMO")
    print("=" * 50)

    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ç–∏–ø—ã –ª–æ–≥–æ–≤
    log_operation("System Startup", {"version": "1.0", "environment": "demo"})
    log_business_rule("Order Validation", "Order must contain at least one item")
    log_requirement_check("OOP Requirements", "SUCCESS", "All 11 requirements implemented")
    log_transfer("OrderService", "PaymentProcessor", "payment data", "transaction_id=TXN123")
    log_error("ValidationError", "Invalid customer ID format", {"customer_id": "INVALID", "expected_format": "CUST######"})
    log_performance("Order Processing", 150.75, {"orders_count": 5, "avg_time_per_order": 30.15})

    print("\n‚úÖ All logging functions tested successfully!")
    print("üìÅ Check the 'logs' folder for log files")


if __name__ == "__main__":
    demo_logging_system()