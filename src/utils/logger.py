"""
McDonald's Management System - Logging Utility
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
import os
from datetime import datetime
from typing import Any, Dict, Optional


class McDonaldsLogger:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è McDonald's —Å–∏—Å—Ç–µ–º—ã
    üö® LOG: –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å
    """

    _instance: Optional['McDonaldsLogger'] = None
    _initialized = False

    def __new__(cls):
        """Singleton pattern –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞"""
        if cls._instance is None:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        if not self._initialized:
            self.setup_logger()
            McDonaldsLogger._initialized = True

    def setup_logger(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤
        log_dir = "logs"
        os.makedirs(log_dir, exist_ok=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatter = logging.Formatter(
            '%(asctime)s | %(levelname)s | %(module)s | %(message)s'
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        file_handler = logging.FileHandler(
            f"{log_dir}/mcdonalds_{datetime.now().strftime('%Y%m%d')}.log"
        )
        file_handler.setFormatter(formatter)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
        self.logger = logging.getLogger('McDonald')
        self.logger.setLevel(logging.INFO)
        self.logger.addHandler(file_handler)
        self.logger.addHandler(console_handler)

    def log_transfer(self, from_module: str, to_module: str, data_type: str, details: str = ""):
        """
        üîÑ TRANSFER: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
        """
        message = f"TRANSFER: {from_module} ‚Üí {to_module} | {data_type}"
        if details:
            message += f" | {details}"
        self.logger.info(message)

    def log_requirement_check(self, requirement: str, status: str, location: str):
        """
        üìã CHECK: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–º–∞–Ω–∏–π OOP
        """
        self.logger.info(f"REQUIREMENT CHECK: {requirement} | {status} | {location}")

    def log_operation(self, operation: str, details: Dict[str, Any] = None):
        """
        üö® LOG: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
        """
        message = f"OPERATION: {operation}"
        if details:
            details_str = " | ".join([f"{k}={v}" for k, v in details.items()])
            message += f" | {details_str}"
        self.logger.info(message)

    def log_error(self, error: str, exception: Exception = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
        message = f"ERROR: {error}"
        if exception:
            message += f" | Exception: {str(exception)}"
        self.logger.error(message)

    def log_business_rule(self, rule: str, result: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª McDonald's"""
        self.logger.info(f"BUSINESS RULE: {rule} | Result: {result}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
mcdonalds_logger = McDonaldsLogger()


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
def log_transfer(from_module: str, to_module: str, data_type: str, details: str = ""):
    """üîÑ TRANSFER: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö"""
    mcdonalds_logger.log_transfer(from_module, to_module, data_type, details)


def log_requirement_check(requirement: str, status: str, location: str):
    """üìã CHECK: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"""
    mcdonalds_logger.log_requirement_check(requirement, status, location)


def log_operation(operation: str, details: Dict[str, Any] = None):
    """üö® LOG: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π"""
    mcdonalds_logger.log_operation(operation, details)


def log_error(error: str, exception: Exception = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫"""
    mcdonalds_logger.log_error(error, exception)


def log_business_rule(rule: str, result: str):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª"""
    mcdonalds_logger.log_business_rule(rule, result)


if __name__ == "__main__":
    # –¢–µ—Å—Ç –ª–æ–≥–≥–µ—Ä–∞
    log_operation("Logger Test", {"module": "logger.py", "status": "OK"})
    log_transfer("logger.py", "test_module", "test_data", "Testing transfer logging")
    log_requirement_check("Logging System", "IMPLEMENTED", "utils/logger.py")